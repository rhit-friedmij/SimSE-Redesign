/*
 * This class is responsible for generating all of the code for the
 * CompositeGraph class in the explanatory tool
 */

package simse.codegenerator.explanatorytoolgenerator;

import simse.codegenerator.CodeGeneratorConstants;
import simse.modelbuilder.ModelOptions;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

import javax.swing.JOptionPane;

import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.CodeBlock;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeSpec;

public class CompositeGraphGenerator implements CodeGeneratorConstants {
  private File directory; // directory to save generated code into
  private ModelOptions options;

  public CompositeGraphGenerator(File directory, ModelOptions options) {
    this.directory = directory;
    this.options = options;
  }

  public void generate() {
    File compGraphFile = new File(directory,
        ("simse\\explanatorytool\\CompositeGraph.java"));
    if (compGraphFile.exists()) {
      compGraphFile.delete(); // delete old version of file
    }
    try {
      FileWriter writer = new FileWriter(compGraphFile);
      writer
          .write("/* File generated by: simse.codegenerator.explanatorytoolgenerator.CompositeGraphGenerator */");
      writer.write(NEWLINE);
      writer.write("package simse.explanatorytool;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("import org.jfree.chart.ChartMouseEvent;");
      writer.write(NEWLINE);
      writer.write("import org.jfree.chart.ChartMouseListener;");
      writer.write(NEWLINE);
      writer.write("import org.jfree.chart.ChartPanel;");
      writer.write(NEWLINE);
      writer.write("import org.jfree.chart.ChartRenderingInfo;");
      writer.write(NEWLINE);
      writer.write("import org.jfree.chart.JFreeChart;");
      writer.write(NEWLINE);
      writer.write("import org.jfree.chart.axis.NumberAxis;");
      writer.write(NEWLINE);
      writer.write("import org.jfree.chart.plot.CombinedDomainXYPlot;");
      writer.write(NEWLINE);
      writer.write("import org.jfree.chart.plot.PlotOrientation;");
      writer.write(NEWLINE);
      writer.write("import org.jfree.chart.plot.XYPlot;");
      writer.write(NEWLINE);
      writer.write("import org.jfree.chart.title.TextTitle;");
      writer.write(NEWLINE);
      writer.write("import org.jfree.data.Range;");
      writer.write(NEWLINE);
      writer.write("import org.jfree.ui.RectangleEdge;");
      writer.write(NEWLINE);
      writer.write("import org.jfree.ui.RefineryUtilities;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("import simse.SimSE;");
      writer.write(NEWLINE);
      writer.write("import simse.state.Clock;");
      writer.write(NEWLINE);
      writer.write("import simse.state.State;");
      writer.write(NEWLINE);
      writer.write("import simse.state.logger.Logger;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("import java.awt.Color;");
      writer.write(NEWLINE);
      writer.write("import java.awt.Point;");
      writer.write(NEWLINE);
      writer.write("import java.awt.event.ActionEvent;");
      writer.write(NEWLINE);
      writer.write("import java.awt.event.ActionListener;");
      writer.write(NEWLINE);
      writer.write("import java.awt.event.MouseEvent;");
      writer.write(NEWLINE);
      writer.write("import java.awt.event.MouseListener;");
      writer.write(NEWLINE);
      writer.write("import java.awt.event.WindowAdapter;");
      writer.write(NEWLINE);
      writer.write("import java.awt.event.WindowEvent;");
      writer.write(NEWLINE);
      writer.write("import java.awt.geom.Point2D;");
      writer.write(NEWLINE);
      writer.write("import java.awt.geom.Rectangle2D;");
      writer.write(NEWLINE);
      writer.write("import java.awt.Font;");
      writer.write(NEWLINE);
      writer.write("import java.util.ArrayList;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("import javax.swing.JFrame;");
      writer.write(NEWLINE);
      writer.write("import javax.swing.JMenuItem;");
      writer.write(NEWLINE);
      writer.write("import javax.swing.JOptionPane;");
      writer.write(NEWLINE);
      writer.write("import javax.swing.JSeparator;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer
          .write("public class CompositeGraph extends JFrame implements ChartMouseListener, MouseListener, ActionListener {");

      // member variables:
      writer.write("private ActionGraph actGraph;");
      writer.write(NEWLINE);
      writer.write("private ObjectGraph objGraph;");
      writer.write(NEWLINE);
    	writer.write("private JFreeChart chart;");
    	writer.write(NEWLINE);
    	writer.write("private ChartPanel chartPanel;");
    	writer.write(NEWLINE);
    	writer.write("private int lastRightClickedX;");
    	writer.write(NEWLINE);
    	writer.write("private JMenuItem newBranchItem;");
    	writer.write(NEWLINE);
    	writer.write("private JSeparator separator;");
    	writer.write(NEWLINE);
    	writer.write("private Branch branch; // branch from which this graph is generated");
    	writer.write(NEWLINE);
      writer.write(NEWLINE);

      
      
      
      // constructor:
      writer
          .write("public CompositeGraph(ObjectGraph objGraph, ActionGraph actGraph, Branch branch) {");
      writer.write(NEWLINE);
  		writer.write("super();");
  		writer.write(NEWLINE);
  		writer.write("this.branch = branch;");
  		writer.write(NEWLINE);
  		writer.write("String title = \"Composite Graph\";");
  		writer.write(NEWLINE);
  		writer.write("if (branch.getName() != null) {");
  		writer.write(NEWLINE);
  		writer.write("title = title.concat(\" - \" + branch.getName());");
  		writer.write(NEWLINE);
  		writer.write(CLOSED_BRACK);
  		writer.write(NEWLINE);
  		writer.write("setTitle(title);");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("this.actGraph = actGraph;");
      writer.write(NEWLINE);
      writer.write("this.objGraph = objGraph;");
      writer.write(NEWLINE);
  		writer.write("lastRightClickedX = 1;");
  		writer.write(NEWLINE);
  		writer.write("newBranchItem = new JMenuItem(\"Start new branch from here\");");
  		writer.write(NEWLINE);
  		writer.write("newBranchItem.addActionListener(this);");
  		writer.write(NEWLINE);
  		writer.write("separator = new JSeparator();");
  		writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// parent plot:");
      writer.write(NEWLINE);
      writer.write("NumberAxis domainAxis = new NumberAxis(\"Clock Ticks\");");
      writer.write(NEWLINE);
      writer
          .write("domainAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());");
      writer.write(NEWLINE);
      writer
          .write("CombinedDomainXYPlot plot = new CombinedDomainXYPlot(domainAxis);");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// add the subplots:");
      writer.write(NEWLINE);
      writer.write("plot.add(objGraph.getXYPlot(), 1);");
      writer.write(NEWLINE);
      writer.write("plot.add(actGraph.getXYPlot(), 1);");
      writer.write(NEWLINE);
      writer.write("plot.setOrientation(PlotOrientation.VERTICAL);");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// make a new chart containing the overlaid plot:");
      writer.write(NEWLINE);
      writer
          .write("chart = new JFreeChart(\"Composite (Object/Action) Graph\", JFreeChart.DEFAULT_TITLE_FONT, plot, true);");
      writer.write(NEWLINE);
      writer
          .write("TextTitle subtitle = new TextTitle(objGraph.getChartTitle() + \" and Selected Actions\", new Font(\"SansSerif\", Font.BOLD, 12));");
      writer.write(NEWLINE);
      writer.write("chart.addSubtitle(subtitle);");
      writer.write(NEWLINE);
      writer.write("chart.setBackgroundPaint(Color.white);");
      writer.write(NEWLINE);
      writer
          .write("chartPanel = new ChartPanel(chart, true, true, true, true, true);");
      writer.write(NEWLINE);
      writer.write("chartPanel.addChartMouseListener(this);");
      writer.write(NEWLINE);
      writer.write("chartPanel.addMouseListener(this);");
      writer.write(NEWLINE);
      writer.write("chartPanel.setPreferredSize(new java.awt.Dimension(1000, 540));");
      writer.write(NEWLINE);
      writer.write("setContentPane(chartPanel);");
      writer.write(NEWLINE);
      writer.write("pack();");
      writer.write(NEWLINE);
      writer.write("RefineryUtilities.centerFrameOnScreen(this);");
      writer.write(NEWLINE);
      writer.write("setVisible(true);");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      
      ClassName chartRenderingInfo = ClassName.get("org.jfree.chart", "ChartRenderingInfo");
      ClassName jFreeChart = ClassName.get("org.jfree.chart", "JFreeChart");
      ClassName numberAxis = ClassName.get("org.jfree.chart.axis", "NumberAxis");
      ClassName chartViewer = ClassName.get("org.jfree.chart.fx", "ChartViewer");
      ClassName chartMouseEventFX = ClassName.get("org.jfree.chart.fx.interaction", "ChartMouseEventFX");
      ClassName chartMouseListenerFX = ClassName.get("org.jfree.chart.fx.interaction", "ChartMouseListenerFX");
      ClassName combinedDomainXYPlot = ClassName.get("org.jfree.chart.plot", "CombinedDomainXYPlot");
      ClassName plotOrientation = ClassName.get("org.jfree.chart.plot", "PlotOrientation");
      ClassName xyPlot = ClassName.get("org.jfree.chart.plot", "XYPlot");
      ClassName textTitle = ClassName.get("org.jfree.chart.title", "TextTitle");
      ClassName rectangleEdge = ClassName.get("org.jfree.chart.ui", "RectangleEdge");
      ClassName actionEvent = ClassName.get("javafx.event", "ActionEvent");
      ClassName eventHandler = ClassName.get("javafx.event", "EventHandler");
      ClassName scene = ClassName.get("javafx.scene", "Scene");
      ClassName menuItem = ClassName.get("javafx.scene.control", "MenuItem");
      ClassName separatorMenuItem = ClassName.get("javafx.scene.control", "SeparatorMenuItem");
      ClassName textInput = ClassName.get("javafx.scene.control", "TextInputDialog");
      ClassName objectGraph = ClassName.get("simse.explanatorytool", "ObjectGraph");
      ClassName actionGraph = ClassName.get("simse.explanatorytool", "ActionGraph");
      ClassName branch = ClassName.get("simse.explanatorytool", "Branch");
      ClassName javaFXHelpers = ClassName.get("simse.gui.util", "JavaFXHelpers");
      ClassName color = ClassName.get("javafx.scene.paint", "Color");
  	  ClassName object = ClassName.get("java.lang", "Object");
  	  ClassName textInputDialog = ClassName.get("javafx.scene.control", "TextInputDialog");
  	  ClassName optional = ClassName.get("java.util", "Optional");
  	  ClassName arrayList = ClassName.get("java.util", "ArrayList");
  	  ClassName state = ClassName.get("simse.state", "State");
  	  ClassName clock = ClassName.get("simse.state", "Clock");
  	  ClassName logger = ClassName.get("simse.state.logger", "Logger");
  	  ClassName simse = ClassName.get("simse", "SimSE");

     
      
      MethodSpec constructor = MethodSpec.constructorBuilder()
    		  .addParameter(objectGraph, "objGraph")
    		  .addParameter(actionGraph, "actGraph")
    		  .addParameter(branch, "branch")
    		  .addStatement("super()")
    		  .addStatement("this.branch = branch")
    		  .addStatement("$T title = \"Composite Graph\"", String.class)
    		  .beginControlFlow("if (branch.getName() != null)")
    		  .addStatement("title = title.concat(\" - \" + branch.getName())")
    		  .endControlFlow()
    		  .addStatement("setTitle(title)")
    		  .addStatement("this.actGraph = actGraph")
    		  .addStatement("this.objGraph = objGraph")
    		  .addStatement("lastRightClickedX = 1")
    		  .addStatement("newBranchItem = new $T(\"Start new branch from here\")", menuItem)
    		  .addStatement("newBranchItem.setOnAction(menuEvent)")
    		  .addStatement("separator = new $T()", separatorMenuItem)
    		  .addStatement("// parent plot")
    		  .addStatement("$T domainAxis = new $T(\"Clock Ticks\")", numberAxis, numberAxis)
    		  .addStatement("domainAxis.setStandardTickUnits($T.createIntegerTickUnits())", numberAxis)
    		  .addStatement("$T plot = new $T(domainAxis)", combinedDomainXYPlot, combinedDomainXYPlot)
    		  .addStatement("// add the subplots")
    		  .addStatement("plot.add(this.objGraph.getXYPlot(), 1)")
    		  .addStatement("plot.add(this.actGraph.getXYPlot(), 1)")
    		  .addStatement("plot.setOrientation($T.VERTICAL)", plotOrientation)
    		  .addStatement("// make a new chart containing the overlaid plot")
    		  .addStatement("chart = new $T(\"Composite (Object/Action) Graph\", $T.DEFAULT_TITLE_FONT, plot, true)", jFreeChart, jFreeChart)
    		  .addStatement("$T subtitle = new $T(objGraph.getChartTitle() + \" and Selected Actions\")", textTitle, textTitle)
    		  .addStatement("chart.addSubtitle(subtitle)")
    		  .addStatement("chartViewer = new $T(chart)", chartViewer)
    		  .addStatement("chartViewer.backgroundProperty().set($T.createBackgroundColor($T.WHITE))", javaFXHelpers, color)
    		  .addStatement("chartViewer.addChartMouseListener(this)")
    		  .addStatement("setScene(new $T(chartViewer))", scene)
    		  .addStatement("show()")
    		  .build();
      

      // "chartMouseClicked" method:
      writer.write("// responds to LEFT mouse clicks on the chart");
      writer.write(NEWLINE);
      writer.write("public void chartMouseClicked(ChartMouseEvent event) {");
      writer.write(NEWLINE);
      writer.write("// send the event to the action graph:");
      writer.write(NEWLINE);
      writer.write("actGraph.chartMouseClicked(event);");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);

      // "chartMouseMoved" method:
      writer.write("public void chartMouseMoved(ChartMouseEvent event) {}");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      
      // "mouseReleased" method:
    	writer.write("// responds to RIGHT-clicks on the chart");
    	writer.write(NEWLINE);
    	writer.write("public void mouseReleased(MouseEvent me) {");
    	writer.write(NEWLINE);
    	String rightClickBlock = "";
    	if (options.getAllowBranchingOption()) {
//	    	writer.write("if (me.getButton() != MouseEvent.BUTTON1) { // not left-click");
//	    	writer.write(NEWLINE);
	    	rightClickBlock += "if (me.getButton() != MouseEvent.BUTTON1) { // not left-click\n";
//	    	writer.write("XYPlot plot = chart.getXYPlot();");
//	    	writer.write(NEWLINE);
	    	rightClickBlock += "XYPlot plot = chart.getXYPlot();\n";
//	    	writer.write("Range domainRange = plot.getDataRange(plot.getDomainAxis());");
//	    	writer.write(NEWLINE);
	    	rightClickBlock += "Range domainRange = plot.getDataRange(plot.getDomainAxis());\n";
//	    	writer.write("if (domainRange != null) { // chart is not blank");
//	    	writer.write(NEWLINE);
	    	rightClickBlock += "if (domainRange != null) { // chart is not blank\\n";
//	    	writer.write("Point2D pt = chartPanel.translateScreenToJava2D(new Point(me.getX(), me.getY()));");
//	    	writer.write(NEWLINE);
	    	rightClickBlock += "javafx.geometry.Point2D pt = chartViewer.localToScreen(event.getScreenX(), event.getScreenY());\n";
//	    	writer.write("ChartRenderingInfo info = this.chartPanel.getChartRenderingInfo();");
//	    	writer.write(NEWLINE);
	    	rightClickBlock += "ChartRenderingInfo info = this.chartViewer.getRenderingInfo();\n";
//	    	writer.write("Rectangle2D dataArea = info.getPlotInfo().getDataArea();");
//	    	writer.write(NEWLINE);
	    	rightClickBlock += "java.awt.geom.Rectangle2D dataArea = info.getPlotInfo().getDataArea();\n";
//	    	writer.write("NumberAxis domainAxis = (NumberAxis)plot.getDomainAxis();");
//	    	writer.write(NEWLINE);
	    	rightClickBlock += "NumberAxis domainAxis = (NumberAxis) plot.getDomainAxis();\n";
//	    	writer.write("RectangleEdge domainAxisEdge = plot.getDomainAxisEdge();");
//	    	writer.write(NEWLINE);
	    	rightClickBlock += "RectangleEdge domainAxisEdge = plot.getDomainAxisEdge();\n";
//	    	writer.write("double chartX = domainAxis.java2DToValue(pt.getX(), dataArea, domainAxisEdge);");
//	    	writer.write(NEWLINE);
	    	rightClickBlock += "double chartX = domainAxis.java2DToValue(pt.getX(), dataArea, domainAxisEdge);\n";
//	    	writer.write("lastRightClickedX = (int)Math.rint(chartX);");
//	    	writer.write(NEWLINE);
	    	rightClickBlock += "lastRightClickedX = (int) Math.rint(chartX);\n";
//	    	writer.write("if (domainRange != null && lastRightClickedX >= domainRange.getLowerBound() && lastRightClickedX <= domainRange.getUpperBound()) { // clicked within domain range");
//	    	writer.write(NEWLINE);
	    	rightClickBlock += "if (domainRange != null && lastRightClickedX >= domainRange.getLowerBound() && lastRightClickedX <= domainRange.getUpperBound()) { // clicked within domain range\n";
//	    	writer.write("if (chartPanel.getPopupMenu().getComponentIndex(newBranchItem) == -1) { // no new branch item on menu currently");
//	    	writer.write(NEWLINE);
	    	rightClickBlock += "if ((chartViewer).getContextMenu().getItems().indexOf(\r\n" + 
	    			"							newBranchItem) == -1) { // no new branch item on\r\n" + 
	    			"													// menu currently\n";
//	    	writer.write("chartPanel.getPopupMenu().add(separator);");
//	    	writer.write(NEWLINE);
	    	rightClickBlock += "chartViewer.getContextMenu().getItems().add(separator);\n";
//	    	writer.write("chartPanel.getPopupMenu().add(newBranchItem);");
//	    	writer.write(NEWLINE);
	    	rightClickBlock += "chartViewer.getContextMenu().getItems().add(newBranchItem);\n";
	    	rightClickBlock += "}\n";
	    	rightClickBlock += "else { // clicked outside of domain range\n";
//	    	writer.write("if (chartPanel.getPopupMenu().getComponentIndex(newBranchItem) >= 0) { // new branch item currently on menu");
//	    	writer.write(NEWLINE);
	    	rightClickBlock += "if (chartViewer.getContextMenu().getItems().indexOf(newBranchItem) >= 0) { // new branch item currently\r\n" + 
	    			"													// on menu";
//	    	writer.write("chartPanel.getPopupMenu().remove(newBranchItem);");
//	    	writer.write(NEWLINE);
	    	rightClickBlock += "chartViewer.getContextMenu().getItems().remove(newBranchItem);\n";
//	    	writer.write("if (chartPanel.getPopupMenu().getComponentIndex(separator) >= 0) { // has separator");
//	    	writer.write(NEWLINE);
	    	rightClickBlock += "if (chartViewer.getContextMenu().getItems().indexOf(\r\n" + 
	    			"								separator) >= 0) { // has separator";
//	    	writer.write("chartPanel.getPopupMenu().remove(separator);");
//	    	writer.write(NEWLINE);
	    	rightClickBlock += "chartViewer.getContextMenu().getItems().remove(separator);";
//	    	writer.write(CLOSED_BRACK);
//	    	writer.write(NEWLINE);
	    	rightClickBlock += "}\n";
//	    	writer.write("chartPanel.getPopupMenu().pack();");
//	    	writer.write(NEWLINE);
	    	rightClickBlock += "}\n";
//	    	writer.write(CLOSED_BRACK);
//	    	writer.write(NEWLINE);
	    	rightClickBlock += "}\n";
//	    	writer.write(CLOSED_BRACK);
//	    	writer.write(NEWLINE);
	    	rightClickBlock += "}\n";
//	    	writer.write(CLOSED_BRACK);
//	    	writer.write(NEWLINE);
	    	rightClickBlock += "}\n";
    	}
//    	writer.write(CLOSED_BRACK);
//    	writer.write(NEWLINE);
//    	writer.write(NEWLINE);
    	
    	// other MouseListener methods:
    	writer.write("public void mousePressed(MouseEvent me) {}");
    	writer.write(NEWLINE);
    	writer.write(NEWLINE);
    	writer.write("public void mouseClicked(MouseEvent me) {}");
    	writer.write(NEWLINE);
    	writer.write(NEWLINE);
    	writer.write("public void mouseEntered(MouseEvent me) {}");
    	writer.write(NEWLINE);
    	writer.write(NEWLINE);
    	writer.write("public void mouseExited(MouseEvent me) {}");
    	writer.write(NEWLINE);
    	writer.write(NEWLINE);
    	
    	// "actionPerformed" methods:
    	writer.write("public void actionPerformed(ActionEvent e) {");
    	writer.write("if (e.getSource() == newBranchItem) {");
			writer.write("String newBranchName = JOptionPane.showInputDialog(null, \"Please name this new game:\", \"Name New Game\", JOptionPane.QUESTION_MESSAGE);");
			writer.write("if (newBranchName != null) {");
			writer.write("State tempState = (State) objGraph.getLog().get(lastRightClickedX).clone();");
			writer.write("Logger tempLogger = new Logger(tempState, new ArrayList<State>(objGraph.getLog().subList(0, lastRightClickedX)));");
			writer.write("Clock tempClock = new Clock(tempLogger, lastRightClickedX);");
			writer.write("tempState.setClock(tempClock);");
			writer.write("tempState.setLogger(tempLogger);");
			writer.write("SimSE.startNewBranch(tempState, new Branch(newBranchName, lastRightClickedX, tempClock.getTime(), branch, null));");
      
			
			
      // "update" method:
//    	writer.write("public void update() {");
//    	writer.write(NEWLINE);
//    	writer.write("actGraph.update();");
//    	writer.write(NEWLINE);
//    	writer.write("objGraph.update();");
//    	writer.write(NEWLINE);
//    	writer.write(CLOSED_BRACK);
//    	writer.write(NEWLINE);
//    	writer.write(NEWLINE);
    	
	MethodSpec update = MethodSpec.methodBuilder("update")
			.returns(void.class)
			.addStatement(CodeBlock.builder().add("actGraph.update()").build())
			.addStatement(CodeBlock.builder().add("objGraph.update()").build())
			.build();
	
	MethodSpec handle = MethodSpec.methodBuilder("handle")
			.addParameter(actionEvent, "event")
			.addStatement("$T source = event.getSource()", object)
			.beginControlFlow("if (source == newBranchItem)")
			.addStatement("$T td = new $T()", textInputDialog, textInputDialog)
			.addStatement("td.setTitle(\"Name New Branch\")")
			.addStatement("td.setContentText(\"Please name this new game:\")")
			.addStatement("td.setHeaderText(null)")
			.addStatement("$T<$T> result = td.showAndWait()", optional, String.class)
			.addStatement("result.ifPresent(name -> { this.newBranchName = name; })")
			.beginControlFlow("if (newBranchName != null)")
			.addStatement("$T tempState = ($T) objGraph.getLog().get(lastRightClickedX).clone()", state, state)
			.addStatement("$T tempLogger = new $T(tempState, new $T<$T>(objGraph.getLog().subList(0, lastRightClickedX)))", logger, logger, arrayList, state)
			.addStatement("$T tempClock = new $T(tempLogger, lastRightClickedX)", clock, clock)
			.addStatement("tempState.setClock(tempClock)")
			.addStatement("tempState.setLogger(tempLogger)")
			.addStatement("$T.startNewBranch(tempState, new Branch(newBranchName, lastRightClickedX, tempClock.getTime(), branch, null))", simse)
			.endControlFlow()
			.endControlFlow()
			.build();
	
	TypeSpec anonHandleClass = TypeSpec.anonymousClassBuilder("")
  		  .addField(String.class, "newBranchName")
            .addMethod(handle)
            .build();
	
	MethodSpec chartMouseClicked = MethodSpec.methodBuilder("chartMouseClicked")
			.addParameter(chartMouseEventFX, "me")
			.addStatement("MouseEvent event = me.getTrigger()")
			.addCode(rightClickBlock)
			.beginControlFlow("else ")
			.addStatement("actGraph.chartMouseClicked(me)")
			.endControlFlow()
			.build();
	
//	TypeSpec.Builder eventHandler = TypeSpec.classBuilder("menuEvent")
//    .addModifiers(Modifier.PRIVATE)
//    .addStatement("private $T<$T> menuEvent = new $T<$T>() $L",
//                  eventHandlerClass,
//                  actionEvent,
//                  eventHandlerClass,
//                  actionEvent,
//                  anonHandleClass);

      // ExitListener class:
//      writer.write("public class ExitListener extends WindowAdapter {");
//      writer.write(NEWLINE);
//      writer.write("public void windowClosing(WindowEvent event) {");
//      writer.write(NEWLINE);
//      writer.write("setVisible(false);");
//      writer.write(NEWLINE);
//      writer.write("dispose();");
//      writer.write(NEWLINE);
//      writer.write(CLOSED_BRACK);
//      writer.write(NEWLINE);
//      writer.write(CLOSED_BRACK);
//      writer.write(NEWLINE);
//      writer.write(CLOSED_BRACK);
//      writer.close();
    } catch (IOException e) {
      JOptionPane.showMessageDialog(null, ("Error writing file "
          + compGraphFile.getPath() + ": " + e.toString()), "File IO Error",
          JOptionPane.WARNING_MESSAGE);
    }
  }
}