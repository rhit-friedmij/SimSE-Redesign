/*
 * This class is responsible for generating all of the code for the logic's
 * ChooseRoleToPlayDialog component
 */

package simse.codegenerator.logicgenerator.dialoggenerator;

import simse.codegenerator.CodeGeneratorConstants;
import simse.codegenerator.CodeGeneratorUtils;

import simse.modelbuilder.actionbuilder.ActionTypeParticipant;
import simse.modelbuilder.actionbuilder.ActionType;
import simse.modelbuilder.actionbuilder.ActionTypeTrigger;
import simse.modelbuilder.actionbuilder.DefinedActionTypes;
import simse.modelbuilder.actionbuilder.UserActionTypeTrigger;
import simse.modelbuilder.objectbuilder.SimSEObjectTypeTypes;
import simse.modelbuilder.rulebuilder.Rule;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import java.util.Vector;

import javax.swing.JOptionPane;

public class ChooseRoleToPlayDialogGenerator implements CodeGeneratorConstants {
  private File directory; // directory to generate into
  private File crtpdFile; // file to generate
  private DefinedActionTypes actTypes; // holds all of the defined action types

  public ChooseRoleToPlayDialogGenerator(DefinedActionTypes actTypes, 
  		File directory) {
    this.directory = directory;
    this.actTypes = actTypes;
  }

  public void generate() {
    try {
      crtpdFile = new File(directory,
          ("simse\\logic\\dialogs\\ChooseRoleToPlayDialog.java"));
      if (crtpdFile.exists()) {
        crtpdFile.delete(); // delete old version of file
      }
      FileWriter writer = new FileWriter(crtpdFile);
      writer
          .write("/* File generated by: simse.codegenerator.logicgenerator.dialoggenerator.ChooseRoleToPlayDialogGenerator */");
      writer.write(NEWLINE);
      // package statement:
      writer.write("package simse.logic.dialogs;");
      writer.write(NEWLINE);
      // imports:
      writer.write("import simse.state.*;");
      writer.write(NEWLINE);
      writer.write("import simse.logic.*;");
      writer.write(NEWLINE);
      writer.write("import simse.adts.objects.*;");
      writer.write(NEWLINE);
      writer.write("import simse.adts.actions.*;");
      writer.write(NEWLINE);
      writer.write("import java.util.*;");
      writer.write(NEWLINE);
      writer.write("import javax.swing.*;");
      writer.write(NEWLINE);
      writer.write("import java.awt.event.*;");
      writer.write(NEWLINE);
      writer.write("import java.awt.*;");
      writer.write(NEWLINE);
      writer.write("import javax.swing.border.*;");
      writer.write(NEWLINE);
      writer.write("import javax.swing.event.*;");
      writer.write(NEWLINE);
      writer
          .write("public class ChooseRoleToPlayDialog extends JDialog implements ActionListener");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      
      // member variables:
      writer.write("private JFrame gui;");
      writer.write(NEWLINE);
      writer.write("private Employee emp;");
      writer.write(NEWLINE);
      writer.write("private simse.adts.actions.Action action;");
      writer.write(NEWLINE);
      writer.write("private String menuText;");
      writer.write(NEWLINE);
      writer.write("private RuleExecutor ruleExec;");
      writer.write(NEWLINE);
      writer.write("private JComboBox partNameList;");
      writer.write(NEWLINE);
      writer.write("private JButton okButton;");
      writer.write(NEWLINE);
      writer.write("private JButton cancelButton;");
      writer.write(NEWLINE);
      
      // constructor:
      writer
          .write("public ChooseRoleToPlayDialog(JFrame owner, Vector<String> partNames, Employee e, simse.adts.actions.Action act, String menText, RuleExecutor re)");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      writer.write("super(owner, true);");
      writer.write(NEWLINE);
      writer.write("gui = owner;");
      writer.write(NEWLINE);
      writer.write("emp = e;");
      writer.write(NEWLINE);
      writer.write("action = act;");
      writer.write(NEWLINE);
      writer.write("menuText = menText;");
      writer.write(NEWLINE);
      writer.write("ruleExec = re;");
      writer.write(NEWLINE);
      writer.write("setTitle(\"Choose Action Role\");");
      writer.write(NEWLINE);
      // main pane:
      writer.write("Box mainPane = Box.createVerticalBox();");
      writer.write(NEWLINE);
      // top pane:
      writer.write("JPanel topPane = new JPanel();");
      writer.write(NEWLINE);
      writer.write("topPane.add(new JLabel(\"Choose role to play:\"));");
      writer.write(NEWLINE);
      writer.write("JPanel middlePane = new JPanel();");
      writer.write(NEWLINE);
      writer.write("partNameList = new JComboBox(partNames);");
      writer.write(NEWLINE);
      writer.write("middlePane.add(partNameList);");
      writer.write(NEWLINE);

      // bottom pane:
      writer.write("JPanel bottomPane = new JPanel();");
      writer.write(NEWLINE);
      writer.write("okButton = new JButton(\"OK\");");
      writer.write(NEWLINE);
      writer.write("okButton.addActionListener(this);");
      writer.write(NEWLINE);
      writer.write("bottomPane.add(okButton);");
      writer.write(NEWLINE);
      writer.write("cancelButton = new JButton(\"Cancel\");");
      writer.write(NEWLINE);
      writer.write("cancelButton.addActionListener(this);");
      writer.write(NEWLINE);
      writer.write("bottomPane.add(cancelButton);");
      writer.write(NEWLINE);

      // add panes to main pane:
      writer.write("mainPane.add(topPane);");
      writer.write(NEWLINE);
      writer.write("mainPane.add(middlePane);");
      writer.write(NEWLINE);
      writer.write("mainPane.add(bottomPane);");
      writer.write(NEWLINE);

      // Set main window frame properties:
      writer.write("setContentPane(mainPane);");
      writer.write(NEWLINE);
      writer.write("validate();");
      writer.write(NEWLINE);
      writer.write("pack();");
      writer.write(NEWLINE);
      writer.write("repaint();");
      writer.write(NEWLINE);
      writer.write("toFront();");
      writer.write(NEWLINE);
      writer.write("Point ownerLoc = owner.getLocationOnScreen();");
      writer.write(NEWLINE);
      writer.write("Point thisLoc = new Point();");
      writer.write(NEWLINE);
      writer
          .write("thisLoc.setLocation((ownerLoc.getX() + (owner.getWidth() / 2) - (this.getWidth() / 2)), (ownerLoc.getY() + (owner.getHeight() / 2) - (this.getHeight() / 2)));");
      writer.write(NEWLINE);
      writer.write("setLocation(thisLoc);");
      writer.write(NEWLINE);
      writer.write("if(partNames.size() == 1)");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      writer.write("onlyOneRole();");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write("else");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      writer.write("setVisible(true);");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);

      // other constructor:
      /*
       * writer.write("public ChooseRoleToPlayDialog(JFrame owner, Vector
       * partNames, Employee e, simse.adts.actions.Action act, String
       * menText)"); writer.write(NEWLINE); writer.write(OPEN_BRACK);
       * writer.write(NEWLINE); writer.write("super(owner, true);");
       * writer.write(NEWLINE); writer.write("emp = e;"); writer.write(NEWLINE);
       * writer.write("action = act;"); writer.write(NEWLINE);
       * writer.write("menuText = menText;"); writer.write(NEWLINE);
       * writer.write("setTitle(\"Choose Action Role\");");
       * writer.write(NEWLINE); // main pane: writer.write("Box mainPane =
       * Box.createVerticalBox();"); writer.write(NEWLINE); // top pane:
       * writer.write("JPanel topPane = new JPanel();"); writer.write(NEWLINE);
       * writer.write("topPane.add(new JLabel(\"Choose role to play:\"));");
       * writer.write(NEWLINE); writer.write("JPanel middlePane = new
       * JPanel();"); writer.write(NEWLINE); writer.write("partNameList = new
       * JComboBox(partNames);"); writer.write(NEWLINE);
       * writer.write("middlePane.add(partNameList);"); writer.write(NEWLINE);
       *  // bottom pane: writer.write("JPanel bottomPane = new JPanel();");
       * writer.write(NEWLINE); writer.write("okButton = new JButton(\"OK\");");
       * writer.write(NEWLINE);
       * writer.write("okButton.addActionListener(this);");
       * writer.write(NEWLINE); writer.write("bottomPane.add(okButton);");
       * writer.write(NEWLINE); writer.write("cancelButton = new
       * JButton(\"Cancel\");"); writer.write(NEWLINE);
       * writer.write("cancelButton.addActionListener(this);");
       * writer.write(NEWLINE); writer.write("bottomPane.add(cancelButton);");
       * writer.write(NEWLINE);
       *  // add panes to main pane: writer.write("mainPane.add(topPane);");
       * writer.write(NEWLINE); writer.write("mainPane.add(middlePane);");
       * writer.write(NEWLINE); writer.write("mainPane.add(bottomPane);");
       * writer.write(NEWLINE);
       *  // Set main window frame properties:
       * writer.write("setContentPane(mainPane);"); writer.write(NEWLINE);
       * writer.write("validate();"); writer.write(NEWLINE);
       * writer.write("pack();"); writer.write(NEWLINE);
       * writer.write("repaint();"); writer.write(NEWLINE);
       * writer.write("toFront();"); writer.write(NEWLINE); writer.write("Point
       * ownerLoc = owner.getLocationOnScreen();"); writer.write(NEWLINE);
       * writer.write("Point thisLoc = new Point();"); writer.write(NEWLINE);
       * writer.write("thisLoc.setLocation((ownerLoc.getX() + (owner.getWidth() /
       * 2) - (this.getWidth() / 2)), (ownerLoc.getY() + (owner.getHeight() / 2) -
       * (this.getHeight() / 2)));"); writer.write(NEWLINE);
       * writer.write("setLocation(thisLoc);"); writer.write(NEWLINE);
       * writer.write("if(partNames.size() == 1)"); writer.write(NEWLINE);
       * writer.write(OPEN_BRACK); writer.write(NEWLINE);
       * writer.write("onlyOneRole();"); writer.write(NEWLINE);
       * writer.write(CLOSED_BRACK); writer.write(NEWLINE);
       * writer.write("else"); writer.write(NEWLINE); writer.write(OPEN_BRACK);
       * writer.write(NEWLINE); writer.write("setVisible(true);");
       * writer.write(NEWLINE); writer.write(CLOSED_BRACK);
       * writer.write(NEWLINE); writer.write(CLOSED_BRACK);
       * writer.write(NEWLINE);
       */

      // actionPerformed function:
      writer.write("public void actionPerformed(ActionEvent evt)");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      writer.write("Object source = evt.getSource();");
      writer.write(NEWLINE);
      writer.write("if(source == cancelButton)");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      writer.write("setVisible(false);");
      writer.write(NEWLINE);
      writer.write("dispose();");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write("else if(source == okButton)");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      writer
          .write("String partName = (String)(partNameList.getSelectedItem());");
      writer.write(NEWLINE);

      // make a Vector of all the action types with user triggers:
      Vector<ActionType> userTrigActs = new Vector<ActionType>();
      Vector<ActionType> allActs = actTypes.getAllActionTypes();
      for (int j = 0; j < allActs.size(); j++) {
        ActionType userAct = allActs.elementAt(j);
        Vector<ActionTypeTrigger> allTrigs = userAct.getAllTriggers();
        for (int k = 0; k < allTrigs.size(); k++) {
          ActionTypeTrigger tempTrig = allTrigs
              .elementAt(k);
          if (tempTrig instanceof UserActionTypeTrigger) {
            userTrigActs.add(userAct);
            break;
          }
        }
      }

      // go through all the actions with user triggers:
      for (int i = 0; i < userTrigActs.size(); i++) {
        ActionType tempAct = userTrigActs.elementAt(i);
        writer.write("if(action instanceof "
            + CodeGeneratorUtils.getUpperCaseLeading(tempAct.getName()) + 
            "Action)");
        writer.write(NEWLINE);
        writer.write(OPEN_BRACK);
        writer.write(NEWLINE);

        // go through all the action's user triggers:
        boolean putElse = false;
        Vector<ActionTypeTrigger> allTrigs = tempAct.getAllTriggers();
        for (int j = 0; j < allTrigs.size(); j++) {
          ActionTypeTrigger outerTrig = allTrigs.elementAt(j);
          if ((outerTrig instanceof UserActionTypeTrigger)
              && (outerTrig.getTriggerText() != null)
              && (outerTrig.getTriggerText().length() > 0)) {
            if (putElse) {
              writer.write("else ");
            } else {
              putElse = true;
            }
            writer.write("if(menuText.equals(\""
                + ((UserActionTypeTrigger) outerTrig).getMenuText() + "\"))");
            writer.write(NEWLINE);
            writer.write(OPEN_BRACK);
            writer.write(NEWLINE);
            writer
                .write("emp.setOverheadText(\""
                    + ((UserActionTypeTrigger) outerTrig).getTriggerText()
                    + "\");");
            writer.write(NEWLINE);
            writer.write(CLOSED_BRACK);
            writer.write(NEWLINE);
          }
        }

        // go through all employee participants:
        Vector<ActionTypeParticipant> allParts = tempAct.getAllParticipants();
        int numEmpParts = 0;
        for (int j = 0; j < allParts.size(); j++) {
          ActionTypeParticipant part = allParts.elementAt(j);
          if (part.getSimSEObjectTypeType() == SimSEObjectTypeTypes.EMPLOYEE) { 
          	// employee participant
            if (numEmpParts > 0) { // not on first element
              writer.write("else ");
            }
            numEmpParts++;
            writer.write("if(partName.equals(\"" + part.getName() + "\"))");
            writer.write(NEWLINE);
            writer.write(OPEN_BRACK);
            writer.write(NEWLINE);
            writer.write("((" + CodeGeneratorUtils.getUpperCaseLeading(
            		tempAct.getName())+ "Action)action).add" + part.getName() + 
            		"(emp);");
            writer.write(NEWLINE);

            // go through all trigger rules and execute rules that are to be
            // executed on each join:
            Vector<Rule> rules = tempAct.getAllTriggerRules();
            for (int k = 0; k < rules.size(); k++) {
              Rule tempRule = rules.elementAt(k);
              if (tempRule.getExecuteOnJoins() == true) {
                writer.write("ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "
                    + "\"" + tempRule.getName() + "\", action);");
                writer.write(NEWLINE);
              }
            }

            writer.write(CLOSED_BRACK);
            writer.write(NEWLINE);
          }
        }
        writer.write(CLOSED_BRACK);
        writer.write(NEWLINE);
      }
      writer.write("setVisible(false);");
      writer.write(NEWLINE);
      writer.write("dispose();");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);

      // onlyOneRole function:
      writer.write("private void onlyOneRole()");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      writer.write("String partName = (String)(partNameList.getItemAt(0));");
      writer.write(NEWLINE);

      // go through all action types w/ user triggers:
      for (int i = 0; i < userTrigActs.size(); i++) {
        ActionType tempAct = userTrigActs.elementAt(i);
        if (i > 0) { // not on first element
          writer.write("else ");
        }
        writer.write("if(action instanceof "
            + CodeGeneratorUtils.getUpperCaseLeading(tempAct.getName()) + 
            "Action)");
        writer.write(NEWLINE);
        writer.write(OPEN_BRACK);
        writer.write(NEWLINE);

        // go through all the actions user triggers:
        boolean putElse = false;
        Vector<ActionTypeTrigger> allTrigs = tempAct.getAllTriggers();
        for (int j = 0; j < allTrigs.size(); j++) {
          ActionTypeTrigger outerTrig = allTrigs.elementAt(j);
          if ((outerTrig instanceof UserActionTypeTrigger)
              && (outerTrig.getTriggerText() != null)
              && (outerTrig.getTriggerText().length() > 0)) {
            if (putElse) {
              writer.write("else ");
            } else {
              putElse = true;
            }
            writer.write("if(menuText.equals(\""
                + ((UserActionTypeTrigger) outerTrig).getMenuText() + "\"))");
            writer.write(NEWLINE);
            writer.write(OPEN_BRACK);
            writer.write(NEWLINE);
            writer.write("emp.setOverheadText(\"" + outerTrig.getTriggerText()
                + "\");");
            writer.write(NEWLINE);
            writer.write(CLOSED_BRACK);
            writer.write(NEWLINE);
          }
        }

        // go through all employee participants:
        Vector<ActionTypeParticipant> allParts = tempAct.getAllParticipants();
        int numEmpParts = 0;
        for (int j = 0; j < allParts.size(); j++) {
          ActionTypeParticipant part = allParts.elementAt(j);
          if (part.getSimSEObjectTypeType() == SimSEObjectTypeTypes.EMPLOYEE) { 
          	// employee participant
            if (numEmpParts > 0) { // not on first element
              writer.write("else ");
            }
            numEmpParts++;
            writer.write("if(partName.equals(\"" + part.getName() + "\"))");
            writer.write(NEWLINE);
            writer.write(OPEN_BRACK);
            writer.write(NEWLINE);
            writer.write("((" + CodeGeneratorUtils.getUpperCaseLeading(
            		tempAct.getName()) + "Action)action).add" + part.getName() + 
            		"(emp);");
            writer.write(NEWLINE);

            // go through all trigger rules and execute rules that are to be
            // executed on each join:
            Vector<Rule> rules = tempAct.getAllTriggerRules();
            for (int k = 0; k < rules.size(); k++) {
              Rule tempRule = rules.elementAt(k);
              if (tempRule.getExecuteOnJoins() == true) {
                writer.write("ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "
                    + "\"" + tempRule.getName() + "\", action);");
                writer.write(NEWLINE);
              }
            }

            writer.write(CLOSED_BRACK);
            writer.write(NEWLINE);
          }
        }
        writer.write(CLOSED_BRACK);
        writer.write(NEWLINE);
      }
      writer.write("setVisible(false);");
      writer.write(NEWLINE);
      writer.write("dispose();");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);

      writer.close();
    } catch (IOException e) {
      JOptionPane.showMessageDialog(null, ("Error writing file "
          + crtpdFile.getPath() + ": " + e.toString()), "File IO Error",
          JOptionPane.WARNING_MESSAGE);
    }
  }
}