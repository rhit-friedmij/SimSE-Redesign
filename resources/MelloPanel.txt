package simse.gui;

import java.util.HashMap;
import java.util.Vector;

import javafx.geometry.HPos;
import javafx.scene.Node;
import javafx.scene.control.Label;
import javafx.scene.control.ScrollPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.scene.text.TextAlignment;
import simse.adts.actions.Action;
import simse.gui.util.JavaFXHelpers;
import simse.state.State;

public class MelloPanel extends Pane implements SimSEPanel, Cloneable{
	
	private GridPane mello;
	private ScrollPane inProgress;
	private ScrollPane complete;
	private VBox prog;
	private VBox comp;
	private static HashMap<State, MelloPanel> instances = new HashMap<>();;
	
	private MelloPanel() {
		VBox pane = new VBox();
		HBox top = new HBox();
		top.getChildren().add(JavaFXHelpers.createImageView("src/simse/gui/icons/mello.png"));
		top.setPrefWidth(600);
		top.setBackground(JavaFXHelpers.createBackgroundColor(Color.rgb(247, 247, 247)));
		
		inProgress = new ScrollPane();
		inProgress.setPrefHeight(91);
		inProgress.setPrefWidth(150);
		prog = new VBox();
		prog.heightProperty().addListener(observable -> inProgress.setVvalue(1D));
		prog.setBackground(JavaFXHelpers.createBackgroundColor(Color.rgb(217, 217, 217)));
		inProgress.setBackground(JavaFXHelpers.createBackgroundColor(Color.rgb(217, 217, 217)));
		inProgress.setContent(prog);
		inProgress.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);
		inProgress.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);
		inProgress.setVvalue(1.0);
		inProgress.setFitToWidth(true);
		
		complete = new ScrollPane();
		complete.setPrefHeight(91);
		complete.setPrefWidth(150);
		comp = new VBox();
		comp.heightProperty().addListener(observable -> complete.setVvalue(1D));
		comp.setBackground(JavaFXHelpers.createBackgroundColor(Color.rgb(217, 217, 217)));
		complete.setBackground(JavaFXHelpers.createBackgroundColor(Color.rgb(217, 217, 217)));
		complete.setContent(comp);
		complete.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);
		complete.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);
		complete.setVvalue(1.0);
		complete.setFitToWidth(true);
		
		mello = new GridPane();
		mello.setHgap(5);
		mello.setBackground(JavaFXHelpers.createBackgroundColor(Color.rgb(96, 164, 214)));
		inProgress.setBackground(JavaFXHelpers.createBackgroundColor(Color.rgb(247,248,249)));
		complete.setBackground(JavaFXHelpers.createBackgroundColor(Color.rgb(247,248,249)));
		prog.setBackground(JavaFXHelpers.createBackgroundColor(Color.rgb(247,248,249)));
		comp.setBackground(JavaFXHelpers.createBackgroundColor(Color.rgb(247,248,249)));
		
		
		Font nameFont = Font.font("Helvetica", FontWeight.BOLD, 14);
		
		Label inProgText = new Label("In Progress");
		Label completeText = new Label("Complete");
		inProgText.setFont(nameFont);
		completeText.setFont(nameFont);
		
		
		GridPane.setHalignment(inProgText, HPos.CENTER);
		GridPane.setHalignment(completeText, HPos.CENTER);
		
		mello.add(inProgText, 0, 0);
		mello.add(completeText, 1, 0);
		mello.add(inProgress, 0, 1);
		mello.add(complete, 1, 1);
		
		pane.getChildren().add(top);
		pane.getChildren().add(mello);
		
		
		this.setPrefHeight(10);
		this.getChildren().add(pane);
	}
	
	public static MelloPanel getInstance(State state) {
		return instances.get(state);
	}
	
	public static void createInstance(State state) {
		instances.put(state, new MelloPanel());
	}
	
	public static void createInstance(State newState, State oldState) {
		MelloPanel oldInstance = instances.get(oldState);
		instances.put(newState, (MelloPanel)oldInstance.clone());
	}
	
	public void addTaskInProgress(String task, Action action, Vector<Object> participants) {
		if (participants.isEmpty()) return;
		removeTask(action.getId());
		prog.getChildren().add(new MelloItem(task, action.getId(), participants));
	}
	
	public void addEmployeeToTask(Action action, Object employee) {
		MelloItem inProg = findTaskInProgress(action.getId());
		if (inProg == null) return;
		prog.getChildren().remove(inProg);
		prog.getChildren().add(inProg.addEmp(employee));
	}
	
	public void removeEmployeeFromTask(Action action, Object employee) {
		MelloItem inProg = findTaskInProgress(action.getId());
		if (inProg == null) return;
		prog.getChildren().remove(inProg);
		inProg = inProg.removeEmp(employee);
		if (inProg != null) prog.getChildren().add(inProg);
	}
	
	public void stopEverything() {
		prog.getChildren().removeAll(prog.getChildren());
	}
	
	public void completeTask(int id) {
		MelloItem found = findTaskInProgress(id);
		if (found != null) {
			prog.getChildren().remove(found);
			comp.getChildren().add(found);
		}
	}
	
	public void removeTask(int id) {
		MelloItem inProg = findTaskInProgress(id);
		if (inProg != null) prog.getChildren().remove(inProg);
	}
	
	private void addTaskInProgress(MelloItem mi) {
		prog.getChildren().add(mi);
	}
	
	private void addCompleteTask(MelloItem mi) {
		comp.getChildren().add(mi);
	}
	
	@Override
	public Object clone() {
		MelloPanel clone = new MelloPanel();
		for (int i=0; i<prog.getChildren().size(); i++) {
			Object child = prog.getChildren().get(i);
			if (child instanceof MelloItem) {
				clone.addTaskInProgress((MelloItem) ((MelloItem) child).clone());
			}
		}
		for (int i=0; i<comp.getChildren().size(); i++) {
			Object child = comp.getChildren().get(i);
			if (child instanceof MelloItem) {
				clone.addCompleteTask((MelloItem) ((MelloItem) child).clone());
			}
		}
		return clone;
	}
	
	private MelloItem findTaskInProgress(int id) {
		for (Node n : prog.getChildren()) {
			if (n instanceof MelloItem) {
				if (((MelloItem) n).isAction(id)) return (MelloItem) n;
			}
		}
		return null;
	}

	@Override
	public Panels getPanelType() {
		return Panels.MELLO;
	}

}
