// /* File generated by: simse.codegenerator.CodeGenerator */
package simse;

import java.lang.Exception;
import java.lang.String;
import java.util.ArrayList;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.ButtonType;
import javafx.stage.Stage;
import simse.engine.Engine;
import simse.explanatorytool.Branch;
import simse.explanatorytool.MultipleTimelinesBrowser;
import simse.gui.SimSEGUI;
import simse.logic.Logic;
import simse.state.State;
import simse.util.RuleCategories;

public class SimSE extends Application {
  private static ArrayList<Branch> branches = new ArrayList<Branch>();

  private static ArrayList<SimSEGUI> guis = new ArrayList<SimSEGUI>();

  private static MultipleTimelinesBrowser timelinesBrowser = null;

  private static Engine engine;

  public static void startNewBranch(State state, Branch branch) {
    for (int i = 0; i < branches.size(); i++) {
      if (branch.getName().equals(branches.get(i).getName())) {
        Alert alert = new Alert(AlertType.ERROR, "Please choose a unique name for your new branch", ButtonType.OK);
        alert.showAndWait();
        return;
      }
    }
    Logic logic = new Logic(state);
    engine = new Engine(logic, state);
    MultipleTimelinesBrowser b = getBrowser();
    SimSEGUI gui = new SimSEGUI(engine, state, logic, branch, b);
    state.getClock().setGUI(gui);
    gui.setX(0);
    gui.setY(0);
    gui.setWidth(1300);
    gui.setHeight(800);
    gui.setResizable(false);
    RuleCategories.initializeRuleCategories();
    engine.giveGUI(gui);
    logic.getTriggerChecker().update(false, gui);
    branches.add(branch);
    guis.add(gui);
    timelinesBrowser.update();
  }
  
  private static MultipleTimelinesBrowser getBrowser() {
	  if (timelinesBrowser == null) {
		  timelinesBrowser = new MultipleTimelinesBrowser();
	  }
	  return timelinesBrowser;
  }

  public static ArrayList<Branch> getBranches() {
    return branches;
  }

  public static int getNumOpenBranches() {
    int numOpen = 0;
    for (Branch b : branches) {
      if (!b.isClosed()) {
        numOpen++;
      }
    }
    return numOpen;
  }

  public static ArrayList<SimSEGUI> getGUIs() {
    return guis;
  }

  public static void main(String[] args) {
	  launch(args);
  }

  public void start(Stage arg0) throws Exception {
    startNewBranch(new State(), new Branch(null, 0, 0, null, ""));
  }
}
