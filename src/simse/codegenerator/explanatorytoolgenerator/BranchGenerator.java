/*
 * This class is responsible for generating all of the code for the Branch
 * class in the explanatory tool
 */

package simse.codegenerator.explanatorytoolgenerator;

import simse.codegenerator.CodeGeneratorConstants;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import javax.swing.JOptionPane;

import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeSpec;

public class BranchGenerator implements CodeGeneratorConstants {
  private File directory; // directory to save generated code into

  public BranchGenerator(File directory) {
    this.directory = directory;
  }

  public void generate() {
    File branchFile = new File(directory,
        ("simse\\explanatorytool\\Branch.java"));
    if (branchFile.exists()) {
      branchFile.delete(); // delete old version of file
    }
    try {
      FileWriter writer = new FileWriter(branchFile);
      
      ClassName branchClass = ClassName.get("simse.explanatorytool", "Branch");
      ClassName state = ClassName.get("simse.state", "State");
      
      MethodSpec constructor = MethodSpec.constructorBuilder()
    		  .addParameter(String.class, "name")
    		  .addParameter(int.class, "start")
    		  .addParameter(int.class, "end")
    		  .addParameter(branchClass, "root")
    		  .addParameter(String.class, "score")
    		  .addStatement("this.name = name")
    		  .addStatement("this.startTick = start")
    		  .addStatement("this.endTick = end")
    		  .addStatement("this.root = root")
    		  .addStatement("this.score = score")	
    		  .addStatement("closed = false")
    		  .build();
      
      MethodSpec getName = MethodSpec.methodBuilder("getName")
    		  .returns(String.class)
    		  .addStatement("return name")
    		  .build();
      
      MethodSpec getStartTick = MethodSpec.methodBuilder("getStartTick")
    		  .returns(int.class)
    		  .addStatement("return startTick")
    		  .build();
      
      MethodSpec getEndTick = MethodSpec.methodBuilder("getEndTick")
    		  .returns(int.class)
    		  .addStatement("return endTick")
    		  .build();
      
      MethodSpec setEndTick = MethodSpec.methodBuilder("setEndTick")
    		  .addParameter(int.class, "end")
    		  .addStatement("endTick = end")
    		  .build();
      
      MethodSpec getRoot = MethodSpec.methodBuilder("getRoot")
    		  .returns(branchClass)
    		  .addStatement("return root")
    		  .build();
      
      MethodSpec getScore = MethodSpec.methodBuilder("getScore")
    		  .returns(String.class)
    		  .addStatement("return score")
    		  .build();
      
      MethodSpec setScore = MethodSpec.methodBuilder("setScore")
    		  .addParameter(String.class, "score")
    		  .addStatement("this.score = score")
    		  .build();
      
      MethodSpec isClosed = MethodSpec.methodBuilder("isClosed")
    		  .returns(boolean.class)
    		  .addStatement("return closed")
    		  .build();
      
      MethodSpec setClosed = MethodSpec.methodBuilder("setClosed")
    		  .addStatement("closed = true")
    		  .build();
      
      MethodSpec update = MethodSpec.methodBuilder("update")
    		  .addParameter(state, "state")
    		  .addStatement("endTick = state.getClock().getTime()")
    		  .addStatement("score = String.valueOf(state.getScore())")
    		  .build();
    			
    			
      TypeSpec branch = TypeSpec.classBuilder("Branch")
    		  .addField(String.class, "name")
    		  .addField(int.class, "startTick")
    		  .addField(int.class, "endTick")
    		  .addField(branchClass, "root")
    		  .addField(String.class, "score")
    		  .addField(boolean.class, "closed")
    		  .addMethod(constructor)
    		  .addMethod(getName)
    		  .addMethod(getStartTick)
    		  .addMethod(getEndTick)
    		  .addMethod(setEndTick)
    		  .addMethod(getRoot)
    		  .addMethod(getScore)
    		  .addMethod(getScore)
    		  .addMethod(setScore)
    		  .addMethod(isClosed)
    		  .addMethod(setClosed)
    		  .addMethod(update)
    		  .build();
      
      
//      writer
//          .write("/* File generated by: simse.codegenerator.explanatorytoolgenerator.BranchGenerator */");
//      writer.write(NEWLINE);
//      writer.write("package simse.explanatorytool;");
//      writer.write(NEWLINE);
//      writer.write(NEWLINE);
//      writer.write("import simse.state.State;");
//      writer.write(NEWLINE);
//      writer.write(NEWLINE);
//      writer.write("public class Branch {");
//      writer.write(NEWLINE);
//      writer.write("private String name; // name of this branch");
//      writer.write(NEWLINE);
//      writer.write("private int startTick; // tick that this branch started");
//      writer.write(NEWLINE);
//      writer.write("private int endTick; // tick that this branch ended (or last tick of branch, if branch is still ongoing)");
//      writer.write(NEWLINE);
//      writer.write("private Branch root; // Branch that this branch stemmed from (null if root)");
//      writer.write(NEWLINE);
//      writer.write("private String score; // score (null if no score given)");
//      writer.write(NEWLINE);
//      writer.write("private boolean closed; // whether or not this branch has been closed");
//      writer.write(NEWLINE);
//      writer.write(NEWLINE);
//      writer.write("public Branch(String name, int start, int end, Branch root, String score) {");
//      writer.write(NEWLINE);
//      writer.write("this.name = name;");
//      writer.write(NEWLINE);
//      writer.write("this.startTick = start;");
//      writer.write(NEWLINE);
//      writer.write("this.endTick = end;");
//      writer.write(NEWLINE);
//      writer.write("this.root = root;");
//      writer.write(NEWLINE);
//      writer.write("this.score = score;");
//      writer.write(NEWLINE);
//      writer.write("closed = false;");
//      writer.write(NEWLINE);
//      writer.write(CLOSED_BRACK);
//      writer.write(NEWLINE);
//      writer.write(NEWLINE);
//      writer.write("public String getName() {");
//      writer.write(NEWLINE);
//      writer.write("return name;");
//      writer.write(NEWLINE);
//      writer.write(CLOSED_BRACK);
//      writer.write(NEWLINE);
//      writer.write(NEWLINE);
//      writer.write("public int getStartTick() {");
//      writer.write(NEWLINE);
//      writer.write("return startTick;");
//      writer.write(NEWLINE);
//      writer.write(CLOSED_BRACK);
//      writer.write(NEWLINE);
//      writer.write(NEWLINE);
//      writer.write("public int getEndTick() {");
//      writer.write(NEWLINE);
//      writer.write("return endTick;");
//      writer.write(NEWLINE);
//      writer.write(CLOSED_BRACK);
//      writer.write(NEWLINE);
//      writer.write(NEWLINE);
//      writer.write("public void setEndTick(int end) {");
//      writer.write(NEWLINE);
//      writer.write("endTick = end;");
//      writer.write(NEWLINE);
//      writer.write(CLOSED_BRACK);
//      writer.write(NEWLINE);
//      writer.write(NEWLINE);
//      writer.write("public Branch getRoot() {");
//      writer.write(NEWLINE);
//      writer.write("return root;");
//      writer.write(NEWLINE);
//      writer.write(CLOSED_BRACK);
//      writer.write(NEWLINE);
//      writer.write(NEWLINE);
//      writer.write("public String getScore() {");
//      writer.write(NEWLINE);
//      writer.write("return score;");
//      writer.write(NEWLINE);
//      writer.write(CLOSED_BRACK);
//      writer.write(NEWLINE);
//      writer.write(NEWLINE);
//      writer.write("public void setScore(String score) {");
//      writer.write(NEWLINE);
//      writer.write("this.score = score;");
//      writer.write(NEWLINE);
//      writer.write(CLOSED_BRACK);
//      writer.write(NEWLINE);
//      writer.write(NEWLINE);
//      writer.write("public boolean isClosed() {");
//      writer.write(NEWLINE);
//      writer.write("return closed;");
//      writer.write(NEWLINE);
//      writer.write(CLOSED_BRACK);
//      writer.write(NEWLINE);
//      writer.write(NEWLINE);
//      writer.write("public void setClosed() {");
//      writer.write(NEWLINE);
//      writer.write("closed = true;");
//      writer.write(NEWLINE);
//      writer.write(CLOSED_BRACK);
//      writer.write(NEWLINE);
//      writer.write(NEWLINE);
//      writer.write("public void update(State state) {");
//      writer.write(NEWLINE);
//      writer.write("endTick = state.getClock().getTime();");
//      writer.write(NEWLINE);
//      writer.write("score = String.valueOf(state.getScore());");
//      writer.write(NEWLINE);
//      writer.write(CLOSED_BRACK);
//      writer.write(NEWLINE);
//
//      writer.write(CLOSED_BRACK);
//      writer.close();
    } catch (IOException e) {
      JOptionPane.showMessageDialog(null, ("Error writing file "
          + branchFile.getPath() + ": " + e.toString()), "File IO Error",
          JOptionPane.WARNING_MESSAGE);
    }
  }
}
