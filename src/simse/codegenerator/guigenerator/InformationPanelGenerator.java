/*
 * panel in the GUI
 */

package simse.codegenerator.guigenerator;

import simse.modelbuilder.objectbuilder.Attribute;
import simse.modelbuilder.objectbuilder.AttributeTypes;
import simse.modelbuilder.objectbuilder.DefinedObjectTypes;
import simse.modelbuilder.objectbuilder.NumericalAttribute;
import simse.modelbuilder.objectbuilder.SimSEObjectType;
import simse.modelbuilder.objectbuilder.SimSEObjectTypeTypes;
import simse.codegenerator.CodeGeneratorConstants;
import simse.codegenerator.CodeGeneratorUtils;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Vector;

import javax.lang.model.element.Modifier;
import javax.swing.JOptionPane;

import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.ParameterizedTypeName;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;

public class InformationPanelGenerator implements CodeGeneratorConstants {
	private DefinedObjectTypes objTypes; // holds all of the defined object types
											// from an sso file
	private File directory; // directory to save generated code into

	public InformationPanelGenerator(DefinedObjectTypes objTypes, File directory) {
		this.objTypes = objTypes;
		this.directory = directory;
	}

	public void generate() {
		File attPanelFile = new File(directory, ("simse\\gui\\InformationPanel.java"));
		if (attPanelFile.exists()) {
			attPanelFile.delete(); // delete old version of file
		}
		try {
			FileWriter writer = new FileWriter(attPanelFile);
			writer.write("/* File generated by: simse.codegenerator.guigenerator.AttributePanelGenerator */\n");
			
			ClassName numberformat = ClassName.get("java.text", "NumberFormat");
			ClassName locale = ClassName.get("java.util", "Locale");
			ClassName vector = ClassName.get("java.util", "Vector");
			ClassName hpos = ClassName.get("javafx.geometry", "HPos");
			ClassName insets = ClassName.get("javafx.geometry", "Insets");
			ClassName vpos = ClassName.get("javafx.geometry", "VPos");
			ClassName listview = ClassName.get("javafx.scene.control", "ListView");
			ClassName scrollpane = ClassName.get("javafx.scene.control", "ScrollPane");
			ClassName scrollbarpolicy = ClassName.get("javafx.scene.control.ScrollPane", "ScrollBarPolicy");
			ClassName image = ClassName.get("javafx.scene.image", "Image");
			ClassName border = ClassName.get("javafx.scene.layout", "Border");
			ClassName borderimage = ClassName.get("javafx.scene.layout", "BorderImage");
			ClassName borderrepeat = ClassName.get("javafx.scene.layout", "BorderRepeat");
			ClassName borderwidths = ClassName.get("javafx.scene.layout", "BorderWidths");
			ClassName gridpane = ClassName.get("javafx.scene.layout", "GridPane");
			ClassName hbox = ClassName.get("javafx.scene.layout", "HBox");
			ClassName pane = ClassName.get("javafx.scene.layout", "Pane");
			ClassName priority = ClassName.get("javafx.scene.layout", "Priority");
			ClassName color = ClassName.get("javafx.scene.paint", "Color");
			ClassName acustomer = ClassName.get("simse.adts.objects", "ACustomer");
			ClassName automatedtestingtool = ClassName.get("simse.adts.objects", "AutomatedTestingTool");
			ClassName code = ClassName.get("simse.adts.objects", "Code");
			ClassName designdocument = ClassName.get("simse.adts.objects", "DesignDocument");
			ClassName designenvironment = ClassName.get("simse.adts.objects", "DesignEnvironment");
			ClassName ide = ClassName.get("simse.adts.objects", "IDE");
			ClassName requirementscapturetool = ClassName.get("simse.adts.objects", "RequirementsCaptureTool");
			ClassName requirementsdocument = ClassName.get("simse.adts.objects", "RequirementsDocument");
			ClassName seproject = ClassName.get("simse.adts.objects", "SEProject");
			ClassName ssobject = ClassName.get("simse.adts.objects", "SSObject");
			ClassName softwareengineer = ClassName.get("simse.adts.objects", "SoftwareEngineer");
			ClassName systemtestplan = ClassName.get("simse.adts.objects", "SystemTestPlan");
			ClassName engine = ClassName.get("simse.engine", "Engine");
			ClassName javafxhelpers = ClassName.get("simse.gui.util", "JavaFXHelpers");
			ClassName state = ClassName.get("simse.state", "State");
			ClassName string = ClassName.get(String.class);
			ClassName simsepanel = ClassName.get("simse.gui", "SimSEPanel");
			ClassName panel = ClassName.get("simse.gui", "Panels");
			ClassName simsegui = ClassName.get("simse.gui", "SimSEGUI");
			TypeName vOfS = ParameterizedTypeName.get(vector, string);

						// constructor:
			MethodSpec constructor = MethodSpec.constructorBuilder()
					.addModifiers(Modifier.PUBLIC)
					.addParameter(simsegui, "g")
					.addParameter(state, "s")
					.addParameter(engine, "e")
					.addStatement("gridPane = new $T()", gridpane)
					.addStatement("this.getChildren().add(gridPane)")
					.addStatement("this.setBackground($T.createBackground$T(Color.rgb(102, 102, 102, 1)))", javafxhelpers, color)
					.addStatement("gridPane.setHgap(10)")
					.addStatement("gridPane.setPadding(new $T(10, 10, 10, 10))", insets)
					.addStatement("")
					.addStatement("border = $T.createImage(\"src/simse/gui/images/layout/border.gif\")", javafxhelpers)
					.addStatement("this.set$T(new Border(new $T(border, $T.FULL, $T.EMPTY, $T.FULL, true, $T.REPEAT, $T.REPEAT)))", border, borderimage, borderwidths, insets, borderwidths, borderrepeat, borderrepeat)
					.addStatement("")
					.addStatement("$N = s", "state")
					.addStatement("")
					.addStatement("numFormat = $T.getNumberInstance($T.US)", numberformat, locale)
					.addStatement("")
					.addStatement("attributes = new Vector<String>()")
					.addStatement("")
					.addStatement("attributeListLeft = new $T()", listview)
					.addStatement("attributePaneLeft = new $T(attributeListLeft)", scrollpane)
					.addStatement("attributePaneLeft.setVbarPolicy($T.AS_NEEDED)", scrollbarpolicy)
					.addStatement("attributePaneLeft.setPrefSize(250, 95)")
					.addStatement("attributeListLeft.prefWidthProperty().bind(attributePaneLeft.widthProperty())")
					.addStatement("")
					.addStatement("attributeListRight = new $T()", listview)
					.addStatement("attributePaneRight = new $T(attributeListRight)", scrollpane)
					.addStatement("attributePaneRight.setVbarPolicy($T.AS_NEEDED)", scrollbarpolicy)
					.addStatement("attributePaneRight.setPrefSize(250, 95)")
					.addStatement("attributeListRight.prefWidthProperty().bind(attributePaneRight.widthProperty())")
					.addStatement("")
					.addStatement("$T attributePane = new $T(5)", hbox, hbox)
					.addStatement("attributePane.getChildren().add(attributePaneLeft)")
					.addStatement("attributePane.getChildren().add(attributePaneRight)")
					.addStatement("attributePane.setBackground($T.createBackground$T(Color.rgb(102, 102, 102, 1)))", javafxhelpers, color)
					.addStatement("")
					.addStatement("$T.setConstraints(attributePane, 0, 0, 1, 1, $T.CENTER, $T.BOTTOM, $T.NEVER, $T.NEVER, new $T(0, 0, 0, 0))", gridpane, hpos, vpos, priority, priority, insets)
					.addStatement("gridPane.getChildren().add(attributePane)")
					.build();

			MethodSpec setFocus = MethodSpec.methodBuilder("setObjectInFocus")
					.addModifiers(Modifier.PUBLIC)
					.returns(void.class)
					.addParameter(ssobject, "obj")
					.addParameter(image, "img")
					.addStatement("$N = obj", "objInFocus")
					.addStatement("updateAttributeList()")
					.build();

			MethodSpec update = MethodSpec.methodBuilder("update")
					.addModifiers(Modifier.PUBLIC)
					.returns(void.class)
					.addStatement("updateAttributeList()")
					.build();
			
			MethodSpec setChanged = MethodSpec.methodBuilder("setGUIChanged")
					.addModifiers(Modifier.PUBLIC)
					.returns(void.class)
					.build();

			MethodSpec updateList = MethodSpec.methodBuilder("updateAttributeList")
					.addModifiers(Modifier.PRIVATE)
					.returns(void.class)
					.addStatement("attributes.clear()")
					.addStatement("attributeListLeft.getItems().clear()")
					.addStatement("attributeListRight.getItems().clear()")
					.addCode(getTypeAttributes())
					.beginControlFlow("for($T data : attributes)", string)
					.addStatement("$N.getItems().add(data)", "attributeListLeft")
					.endControlFlow()
					.addStatement("$T rightHandAtts = new $T()", vOfS, vOfS)
					.beginControlFlow("if ($N.size() > ATTRIBUTE_LIST_CAPACITY)", "attributes")
					.addStatement("attributeListLeft.getItems().clear()")
					.addStatement("attributeListRight.getItems().clear()")
					.beginControlFlow("while ((ATTRIBUTE_LIST_CAPACITY) < $N.size())", "attributes")
					.addStatement("rightHandAtts.add($N.remove(ATTRIBUTE_LIST_CAPACITY))", "attributes")
					.endControlFlow()
					.beginControlFlow("for(String data : rightHandAtts)")
					.addStatement("$N.getItems().add(data)", "attributeListRight")
					.endControlFlow()
					.beginControlFlow("for(String data : attributes)")
					.addStatement("$N.getItems().add(data)", "attributeListLeft")
					.endControlFlow()
					.endControlFlow()
					.build();

			MethodSpec getPanelType = MethodSpec.methodBuilder("getPanelType")
					.addAnnotation(Override.class)
					.addModifiers(Modifier.PUBLIC)
					.returns(panel)
					.addStatement("return $T.INFORMATION", panel)
					.build();
			
			TypeSpec informationPanel = TypeSpec.classBuilder("InformationPanel")
					.superclass(pane)
					.addSuperinterface(simsepanel)
					.addField(FieldSpec.builder(int.class, "ATTRIBUTE_LIST_CAPACITY", Modifier.PRIVATE, Modifier.FINAL)
							.initializer("5")
							.build())
					.addField(gridpane, "gridPane", Modifier.PRIVATE)
					.addField(state, "state", Modifier.PRIVATE)
					.addField(numberformat, "numFormat", Modifier.PRIVATE)
					.addField(scrollpane, "attributePaneLeft", Modifier.PRIVATE)
					.addField(scrollpane, "attributePaneRight", Modifier.PRIVATE)
					.addField(listview, "attributeListLeft", Modifier.PRIVATE)
					.addField(listview, "attributeListRight", Modifier.PRIVATE)
					.addField(vOfS, "attributes", Modifier.PRIVATE)
					.addField(FieldSpec.builder(ssobject, "objInFocus", Modifier.PRIVATE)
							.initializer("null")
							.build())
					.addField(image, "border", Modifier.PRIVATE)
					.addMethod(constructor)
					.addMethod(setFocus)
					.addMethod(update)
					.addMethod(setChanged)
					.addMethod(updateList)
					.addMethod(getPanelType)
					.build();
			
			JavaFile file = JavaFile.builder("simse.gui", informationPanel)
					.build();
			
			
			file.writeTo(writer);
			writer.close();
			
		} catch (IOException e) {
			JOptionPane.showMessageDialog(null, ("Error writing file " + attPanelFile.getPath() + ": " + e.toString()),
					"File IO Error", JOptionPane.WARNING_MESSAGE);
		}
	}

	private String getTypeAttributes() {
		String attString = "";
		// loop through all SimSEObjectTypeTypes:
		String[] metaTypes = SimSEObjectTypeTypes.getAllTypesAsStrings();
		for (int i = 0; i < metaTypes.length; i++) {
			String typeName = metaTypes[i];
			attString.concat("// " + typeName + ":");
			attString.concat("\n");
			if (i > 0) { // not on first element
				attString.concat("else ");
			}
			attString.concat("if((objInFocus != null) && state.get" + typeName
					+ "StateRepository().getAll().contains(objInFocus))");
			attString.concat("\n");
			attString.concat("{");
			attString.concat("\n");
			// go through all object types:
			Vector<SimSEObjectType> types = objTypes.getAllObjectTypes();
			// Make a vector of only the types that have the correct meta type:
			Vector<SimSEObjectType> correctTypes = new Vector<SimSEObjectType>();
			for (int j = 0; j < types.size(); j++) {
				SimSEObjectType temp = types.elementAt(j);
				if (temp.getType() == SimSEObjectTypeTypes.getIntRepresentation(typeName)) {
					correctTypes.add(temp);
				}
			}
			for (int j = 0; j < correctTypes.size(); j++) {
				SimSEObjectType tempType = correctTypes.elementAt(j);
				if (j > 0) { // not on first element
					attString.concat("else ");
				}
				attString.concat(
						"if(objInFocus instanceof " + CodeGeneratorUtils.getUpperCaseLeading(tempType.getName()) + ")");
				attString.concat("\n");
				attString.concat("{");
				attString.concat("\n");
				attString.concat(CodeGeneratorUtils.getUpperCaseLeading(tempType.getName()) + " p = ("
						+ CodeGeneratorUtils.getUpperCaseLeading(tempType.getName()) + ")objInFocus;");
				attString.concat("\n");
				attString.concat("attributes.add(\"Type: " + tempType.getName() + "\");");
				attString.concat("\n");
				// go through all attributes:
				Vector<Attribute> atts = tempType.getAllAttributes();
				for (int k = 0; k < atts.size(); k++) {
					Attribute a = atts.elementAt(k);
					if (a.isVisible()) {
						attString.concat("if(!state.getClock().isStopped()) // game not over");
						attString.concat("\n");
						attString.concat("{");
						attString.concat("\n");
						if (a.getType() == AttributeTypes.DOUBLE) { // double att -- need
																	// to do formatting
																	// stuff
							NumericalAttribute numAtt = (NumericalAttribute) a;
							if (numAtt.getMinNumFractionDigits() != null) { // has a min num
																			// fraction
																			// digits
								attString.concat("numFormat.setMinimumFractionDigits("
										+ numAtt.getMinNumFractionDigits().intValue() + ");");
								attString.concat("\n");
							} else {
								// set it to the default minimum:
								attString.concat("numFormat.setMinimumFractionDigits(0);");
								attString.concat("\n");
							}
							if (numAtt.getMaxNumFractionDigits() != null) { // has a max num
																			// fraction
																			// digits
								attString.concat("numFormat.setMaximumFractionDigits("
										+ numAtt.getMaxNumFractionDigits().intValue() + ");");
								attString.concat("\n");
							} else {
								// set it to the default maximum:
								attString.concat("numFormat.setMaximumFractionDigits(16);");
								attString.concat("\n");
							}
							attString.concat("attributes.add(\"" + numAtt.getName() + ": \" + numFormat.format(p.get"
									+ CodeGeneratorUtils.getUpperCaseLeading(numAtt.getName()) + "()) + \"\");");
							attString.concat("\n");
						} else { // non-double att -- no formatting required
							attString.concat("attributes.add(\"" + a.getName() + ": \" + p.get"
									+ CodeGeneratorUtils.getUpperCaseLeading(a.getName()) + "() + \"\");");
							attString.concat("\n");
						}
						attString.concat("}");
						attString.concat("\n");
					}
					if (a.isVisibleOnCompletion()) {
						attString.concat("if(state.getClock().isStopped()) // game is over");
						attString.concat("\n");
						attString.concat("{");
						attString.concat("\n");
						if (a.getType() == AttributeTypes.DOUBLE) { // double att -- need
																	// to do formatting
																	// stuff
							NumericalAttribute numAtt = (NumericalAttribute) a;
							if (numAtt.getMinNumFractionDigits() != null) { // has a min num
																			// fraction
																			// digits
								attString.concat("numFormat.setMinimumFractionDigits("
										+ numAtt.getMinNumFractionDigits().intValue() + ");");
								attString.concat("\n");
							} else {
								// set it to the default minimum:
								attString.concat("numFormat.setMinimumFractionDigits(0);");
								attString.concat("\n");
							}
							if (numAtt.getMaxNumFractionDigits() != null) { // has a max num
																			// fraction
																			// digits
								attString.concat("numFormat.setMaximumFractionDigits("
										+ numAtt.getMaxNumFractionDigits().intValue() + ");");
								attString.concat("\n");
							} else {
								// set it to the default maximum:
								attString.concat("numFormat.setMaximumFractionDigits(16);");
								attString.concat("\n");
							}
							attString.concat("attributes.add(\"" + numAtt.getName() + ": \" + numFormat.format(p.get"
									+ CodeGeneratorUtils.getUpperCaseLeading(numAtt.getName()) + "()) + \"\");");
							attString.concat("\n");
						} else { // non-double att -- no formatting required
							attString.concat("attributes.add(\"" + a.getName() + ": \" + p.get"
									+ CodeGeneratorUtils.getUpperCaseLeading(a.getName()) + "() + \"\");");
							attString.concat("\n");
						}
						attString.concat("}");
						attString.concat("\n");
					}
				}
				attString.concat("}");
				attString.concat("\n");
			}
			attString.concat("}");
			attString.concat("\n");
		}
		return attString;
	}
}