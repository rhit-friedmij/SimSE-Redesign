/*
 * This class is responsible for generating all of the code for the state's
 * clock component
 */

package simse.codegenerator.stategenerator;

import simse.codegenerator.CodeGeneratorConstants;

import simse.modelbuilder.ModelOptions;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import javax.swing.JOptionPane;

public class ClockGenerator implements CodeGeneratorConstants {
  private File directory; // directory to generate into

  public ClockGenerator(ModelOptions options) {
    directory = options.getCodeGenerationDestinationDirectory();
  }

  public void generate() {
    File clockFile = new File(directory, ("simse\\state\\Clock.java"));
    if (clockFile.exists()) {
      clockFile.delete(); // delete old version of file
    }
    try {
      FileWriter writer = new FileWriter(clockFile);
      writer
          .write("/* File generated by: simse.codegenerator.stategenerator.ClockGenerator */");
      writer.write(NEWLINE);
      writer.write("package simse.state;");
      writer.write(NEWLINE);
      writer.write("import simse.gui.*;");
      writer.write(NEWLINE);
      writer.write("import simse.state.logger.Logger;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("public class Clock");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);

      // member variables:
      writer.write("private int time;");
      writer.write(NEWLINE);
      writer.write("private boolean stopped;");
      writer.write(NEWLINE);
      writer.write("private SimSEGUI gui;");
      writer.write(NEWLINE);
      writer.write("private Logger logger;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);

      // constructor:
      writer.write("public Clock(Logger logger)");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      writer.write("time = 0;");
      writer.write(NEWLINE);
      writer.write("stopped = false;");
      writer.write(NEWLINE);
      writer.write("gui = null;");
      writer.write(NEWLINE);
      writer.write("this.logger = logger;");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      
      // constructor #2:
    	writer.write("public Clock(Logger logger, int time) {");
    	writer.write(NEWLINE);
    	writer.write("this.time = time;");
    	writer.write(NEWLINE);
    	writer.write("stopped = false;");
    	writer.write(NEWLINE);
    	writer.write("gui = null;");
    	writer.write(NEWLINE);
    	writer.write("this.logger = logger;");
    	writer.write(NEWLINE);
    	writer.write(CLOSED_BRACK);
    	writer.write(NEWLINE);
    	writer.write(NEWLINE);

      // methods:
      // "setTime" method: 
    	writer.write("public void setTime(int time) {");
    	writer.write(NEWLINE);
    	writer.write("this.time = time;");
    	writer.write(NEWLINE);
    	writer.write(CLOSED_BRACK);
    	writer.write(NEWLINE);
    	writer.write(NEWLINE);
      
      // "incrementTime" method:
      writer.write("public void incrementTime()");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      writer.write("time++;");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);

      // "setGUI" method:
      writer.write("public void setGUI(SimSEGUI g)");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      writer.write("gui = g;");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);

      // "getTime" method:
      writer.write("public int getTime()");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      writer.write("return time;");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);

      // "isStopped" method:
      writer.write("public boolean isStopped()");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      writer.write("return stopped;");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);

      // "stop" method:
      writer.write("public void stop()");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      writer.write("stopped = true;");
      writer.write(NEWLINE);
      writer.write("logger.update();");
      writer.write(NEWLINE);
      writer.write("gui.forceGUIUpdate();");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);

      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.close();
    } catch (IOException e) {
      JOptionPane.showMessageDialog(null, ("Error writing file "
          + clockFile.getPath() + ": " + e.toString()), "File IO Error",
          JOptionPane.WARNING_MESSAGE);
    }
  }
}