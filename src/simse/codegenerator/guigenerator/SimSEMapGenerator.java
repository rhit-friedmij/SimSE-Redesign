/*
 * This class is responsible for generating all of the code for the SimSEMap
 * class in the GUI
 */

package simse.codegenerator.guigenerator;

import simse.codegenerator.CodeGeneratorConstants;
import simse.codegenerator.CodeGeneratorUtils;

import simse.modelbuilder.mapeditor.MapData;
import simse.modelbuilder.mapeditor.TileData;
import simse.modelbuilder.mapeditor.UserData;
import simse.modelbuilder.objectbuilder.AttributeTypes;
import simse.modelbuilder.objectbuilder.DefinedObjectTypes;
import simse.modelbuilder.objectbuilder.SimSEObjectType;
import simse.modelbuilder.objectbuilder.SimSEObjectTypeTypes;
import simse.modelbuilder.startstatebuilder.InstantiatedAttribute;
import simse.modelbuilder.startstatebuilder.SimSEObject;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;

import javax.swing.JOptionPane;

public class SimSEMapGenerator implements CodeGeneratorConstants {
  private File directory; // directory to save generated code into
  private DefinedObjectTypes objTypes; // holds all of the defined object types
                                       // from an sso file
  private Hashtable<SimSEObject, String> objsToImages; // maps SimSEObjects
																												// (keys) to pathname
																												// (String) of image
																												// file (values)
  private Hashtable<SimSEObject, Vector<Integer>> objsToXYLocs; // maps
																																// SimSEObjects
																																// (keys) to
																																// XYLocations
																																// (Vectors) of
																																// employees
																																// (values)
  private TileData[][] mapRep; // representation of map
  private ArrayList<UserData> userDatas; // array list of UserDatas

  public SimSEMapGenerator(DefinedObjectTypes objTypes, Hashtable<SimSEObject, 
  		String> objsToImages, TileData[][] mapRep, ArrayList<UserData> userDatas, 
  		File directory) {
    this.objTypes = objTypes;
    this.objsToImages = objsToImages;
    this.mapRep = mapRep;
    this.userDatas = userDatas;
    objsToXYLocs = new Hashtable<SimSEObject, Vector<Integer>>();
    this.directory = directory;
  }

  public void generate() {
    // generate file:
    File ssmFile = new File(directory, ("simse\\gui\\SimSEMap.java"));
    if (ssmFile.exists()) {
      ssmFile.delete(); // delete old version of file
    }
    try {
      FileWriter writer = new FileWriter(ssmFile);
      writer
          .write("/* File generated by: simse.codegenerator.guigenerator.SimSEMapGenerator */");
      writer.write(NEWLINE);
      writer.write("package simse.gui;");
      writer.write(NEWLINE);
      writer.write("import simse.adts.objects.*;");
      writer.write(NEWLINE);
      writer.write("import simse.state.*;");
      writer.write(NEWLINE);
      writer.write("import simse.logic.*;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("import java.util.*;");
      writer.write(NEWLINE);
      writer.write("import java.awt.event.*;");
      writer.write(NEWLINE);
      writer.write("import java.awt.Image;");
      writer.write(NEWLINE);
      writer.write("import javax.swing.*;");
      writer.write(NEWLINE);
      writer.write("import javax.swing.event.*;");
      writer.write(NEWLINE);
      writer.write("import java.io.*;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer
          .write("public class SimSEMap extends JPanel implements MouseListener, ActionListener");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);

      // member variables:
      writer.write("protected State state;");
      writer.write(NEWLINE);
      writer.write("protected Logic logic;");
      writer.write(NEWLINE);
      writer
          .write("protected String sopFile; // location of sop file if loaded");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("protected TileData[][] mapRep;");
      writer.write(NEWLINE);
      writer
          .write("protected ArrayList<DisplayedEmployee> sopUsers; // all of the DisplayedEmployees in the state");
      writer.write(NEWLINE);
      writer.write("protected int ssObjCount;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);

      // constructor:
      writer.write("public SimSEMap(State s, Logic l)");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      writer.write("state = s;");
      writer.write(NEWLINE);
      writer.write("logic = l;");
      writer.write(NEWLINE);
      writer
          .write("mapRep = new TileData[MapData.X_MAPSIZE][MapData.Y_MAPSIZE];");
      writer.write(NEWLINE);
      writer.write("for(int i=0; i<MapData.Y_MAPSIZE; i++)");
      writer.write(NEWLINE);
      writer.write("for(int j=0; j<MapData.X_MAPSIZE; j++)");
      writer.write(NEWLINE);
      writer
          .write("mapRep[j][i] = new TileData(MapData.TILE_GRID, MapData.TRANSPARENT);");
      writer.write(NEWLINE);
      writer.write("sopUsers = new ArrayList<DisplayedEmployee>();");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// get all of the employees from the state:");
      writer.write(NEWLINE);
      writer
          .write("Vector<Employee> allEmps = state.getEmployeeStateRepository().getAll();");
      writer.write(NEWLINE);
      writer.write("for(int i=0; i<allEmps.size(); i++)");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      writer.write("Employee tempEmp = allEmps.elementAt(i);");
      writer.write(NEWLINE);
      writer
          .write("DisplayedEmployee tmpUser = new DisplayedEmployee(tempEmp, null, this, false, false, -1, -1);");
      writer.write(NEWLINE);
      writer.write("sopUsers.add(tmpUser);");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// go through all sopUsers and set information:");
      writer.write(NEWLINE);
      writer.write("for(int i=0; i<sopUsers.size(); i++)");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      writer
          .write("DisplayedEmployee user = sopUsers.get(i);");
      writer.write(NEWLINE);
      writer
          .write("user.setXYLocations(getXYCoordinates(user.getEmployee())[0], getXYCoordinates(user.getEmployee())[1]);");
      writer.write(NEWLINE);
      writer.write("String url = getImage(user.getEmployee());");
      writer.write(NEWLINE);
      writer.write("if (url != null) {");
      writer.write(NEWLINE);
      writer.write("user.setUserIcon(url);");
      writer.write(NEWLINE);

      // go through all user datas:
      for (int i = 0; i < userDatas.size(); i++) {
        UserData tmpUser = userDatas.get(i);
        if (i > 0) {
          writer.write("else ");
        }
        writer.write("if((user.getEmployee() instanceof " + 
        		CodeGeneratorUtils.getUpperCaseLeading(
        				tmpUser.getSimSEObject().getSimSEObjectType().getName()) + 
        				") && (((" + 
        				CodeGeneratorUtils.getUpperCaseLeading(
        						tmpUser.getSimSEObject().getSimSEObjectType().getName()) + 
        						")user.getEmployee()).get");
        SimSEObjectType objType = tmpUser.getSimSEObject().getSimSEObjectType();
        writer.write(CodeGeneratorUtils.getUpperCaseLeading(
        		objType.getKey().getName()) + "()");

        if ((tmpUser.getSimSEObject().getKey() != null)
            && (tmpUser.getSimSEObject().getKey().isInstantiated())) { // key
																																			 // is
																																			 // instantiated
          Object keyAttVal = tmpUser.getSimSEObject().getKey().getValue();
          if (objType.getKey().getType() == AttributeTypes.STRING) { // string
                                                                   	 // attribute
            writer.write(".equals(\"" + keyAttVal.toString() + "\")))");
          } else { // non-string attribute
            writer.write(" == " + keyAttVal.toString() + "))");
          }

          // x y locations:
          Vector<Integer> xys = new Vector<Integer>();
          xys.add(new Integer(tmpUser.getXLocation()));
          xys.add(new Integer(tmpUser.getYLocation()));
          objsToXYLocs.put(tmpUser.getSimSEObject(), xys);

          writer.write(NEWLINE);
          writer.write(OPEN_BRACK);
          writer.write(NEWLINE);
          writer.write("user.setDisplayed(" + tmpUser.isDisplayed() + ");");
          writer.write(NEWLINE);
          writer.write("user.setActivated(" + tmpUser.isActivated() + ");");
          writer.write(NEWLINE);
          writer.write(CLOSED_BRACK);
          writer.write(NEWLINE);
        } else {
          JOptionPane.showMessageDialog(null, "Generator exception: " + 
          		objType.getName() + " " + 
          		(SimSEObjectTypeTypes.getText(
          				tmpUser.getSimSEObject().getSimSEObjectType().getType())) + 
          				" object has no key attribute value.");
        }
      }
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);

      // map info:
      writer.write("// map objects:");
      writer.write(NEWLINE);
      for (int i = 0; i < MapData.Y_MAPSIZE; i++) {
        for (int j = 0; j < MapData.X_MAPSIZE; j++) {
          writer.write("mapRep[" + j + "][" + i + "].baseKey = "
              + mapRep[j][i].getBaseKey() + ";");
          writer.write(NEWLINE);
          writer.write("mapRep[" + j + "][" + i + "].fringeKey = "
              + mapRep[j][i].getFringeKey() + ";");
          writer.write(NEWLINE);
        }
      }
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);

      // other functions:
      writer.write("public void mouseClicked(MouseEvent me){}");
      writer.write(NEWLINE);
      writer.write("public void mousePressed(MouseEvent me){}");
      writer.write(NEWLINE);
      writer.write("public void mouseReleased(MouseEvent me){}");
      writer.write(NEWLINE);
      writer.write("public void mouseEntered(MouseEvent me){}");
      writer.write(NEWLINE);
      writer.write("public void mouseExited(MouseEvent me){}");
      writer.write(NEWLINE);
      writer.write("public void actionPerformed(ActionEvent e){}");
      writer.write(NEWLINE);
      writer.write(NEWLINE);

      // getImage function:
      writer
          .write("protected String getImage(Employee e) // returns the url of the employee's image");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      // go through all object types:
      Vector<SimSEObjectType> types = objTypes.getAllObjectTypes();
      // Make a vector of only the employee types:
      Vector<SimSEObjectType> empTypes = new Vector<SimSEObjectType>();
      for (int i = 0; i < types.size(); i++) {
        SimSEObjectType temp = types.elementAt(i);
        if (temp.getType() == SimSEObjectTypeTypes.EMPLOYEE) {
          empTypes.add(temp);
        }
      }
      // go through all employee types:
      for (int i = 0; i < empTypes.size(); i++) {
        SimSEObjectType tempType = empTypes.elementAt(i);
        if (i > 0) { // not on first element
          writer.write("else ");
        }
        writer.write("if(e instanceof "
            + CodeGeneratorUtils.getUpperCaseLeading(tempType.getName()) + ")");
        writer.write(NEWLINE);
        writer.write(OPEN_BRACK);
        writer.write(NEWLINE);
        writer.write(CodeGeneratorUtils.getUpperCaseLeading(tempType.getName()) 
        		+ " p = (" + 
        		CodeGeneratorUtils.getUpperCaseLeading(tempType.getName()) + ")e;");
        writer.write(NEWLINE);

        /*
         * go through all of the Employee created objects (and objects created
         * by create objects rules):
         */
        Enumeration<SimSEObject> createdObjects = objsToImages.keys();
        boolean putElse = false;
        for (int k = 0; k < objsToImages.size(); k++) {
          SimSEObject obj = createdObjects.nextElement();
          if (obj.getSimSEObjectType().getName().equals(tempType.getName())) {
            boolean allAttValuesInit = true; // whether or not all this object's
                                             // attribute values are initialized
            Vector<InstantiatedAttribute> atts = obj.getAllAttributes();
            if (atts.size() < obj.getSimSEObjectType().getAllAttributes()
                .size()) { // not all atts instantiated
              allAttValuesInit = false;
            } else {
              for (int m = 0; m < atts.size(); m++) {
                InstantiatedAttribute att = atts.elementAt(m);
                if (att.isInstantiated() == false) { // not instantiated
                  allAttValuesInit = false;
                  break;
                }
              }
            }
            if (allAttValuesInit) {
              if (putElse) {
                writer.write("else ");
              } else {
                putElse = true;
              }
              writer.write("if(p.get" + 
              		CodeGeneratorUtils.getUpperCaseLeading(
              				obj.getKey().getAttribute().getName()) + 
              				"()");
              if (obj.getKey().getAttribute().getType() == 
              	AttributeTypes.STRING) { // string att
                writer.write(".equals(\"" + obj.getKey().getValue().toString() +
                		"\"))");
              } else { // integer, double, or boolean att
                writer.write(" == " + obj.getKey().getValue().toString() + ")");
              }
              writer.write(NEWLINE);
              writer.write(OPEN_BRACK);
              writer.write(NEWLINE);
              if (((objsToImages.get(obj)) != null)
                  && (((String) objsToImages.get(obj)).length() > 0)) {
                String imagePath = (iconsDirectory + ((String) objsToImages
                    .get(obj)));
                writer.write("return \"" + imagePath + "\";");
                writer.write(NEWLINE);
              }
              writer.write(CLOSED_BRACK);
              writer.write(NEWLINE);
            }
          }
        }
        writer.write(CLOSED_BRACK);
        writer.write(NEWLINE);
      }
      writer.write("return null;");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);

      // getXYCoordinates function:
      writer
          .write("protected int[] getXYCoordinates(Employee emp) // returns the xy tile coorindates of the specified employee");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      writer.write("int[] xys = {-1, -1};");
      writer.write(NEWLINE);

      // go through all employee types:
      for (int i = 0; i < empTypes.size(); i++) {
        SimSEObjectType tempType = empTypes.elementAt(i);
        if (i > 0) { // not on first element
          writer.write("else ");
        }
        writer.write("if(emp instanceof "
            + CodeGeneratorUtils.getUpperCaseLeading(tempType.getName()) + ")");
        writer.write(NEWLINE);
        writer.write(OPEN_BRACK);
        writer.write(NEWLINE);
        writer.write(CodeGeneratorUtils.getUpperCaseLeading(tempType.getName()) 
        		+ " p = (" + CodeGeneratorUtils.getUpperCaseLeading(
        				tempType.getName()) + ")emp;");
        writer.write(NEWLINE);
        writer.write(OPEN_BRACK);
        writer.write(NEWLINE);

        // go through all of the Employees:
        Enumeration<SimSEObject> employees = objsToXYLocs.keys();
        boolean putElse = false;
        for (int k = 0; k < objsToXYLocs.size(); k++) {
          SimSEObject obj = employees.nextElement();
          if (obj.getSimSEObjectType().getName().equals(tempType.getName())) { // matching
                                                                             	 // type
            if (putElse) {
              writer.write("else ");
            } else {
              putElse = true;
            }
            writer.write("if(p.get" + 
            		CodeGeneratorUtils.getUpperCaseLeading(
            				obj.getKey().getAttribute().getName()) + "()");
            if (obj.getKey().isInstantiated()) {
              if (obj.getKey().getAttribute().getType() == 
              	AttributeTypes.STRING) { // string att
                writer.write(".equals(\"" + obj.getKey().getValue().toString()
                    + "\"))");
              } else { // integer, double, or boolean att
                writer.write(" == " + obj.getKey().getValue().toString() + ")");
              }
            }
            writer.write(NEWLINE);
            writer.write(OPEN_BRACK);
            writer.write(NEWLINE);
            if ((objsToXYLocs.get(obj) != null)
                && (objsToXYLocs.get(obj).size() >= 2)) {
              int x = objsToXYLocs.get(obj).elementAt(0).intValue();
              int y = objsToXYLocs.get(obj).elementAt(1).intValue();
              writer.write("xys[0] = " + x + ";");
              writer.write(NEWLINE);
              writer.write("xys[1] = " + y + ";");
              writer.write(NEWLINE);
            }
            writer.write(CLOSED_BRACK);
            writer.write(NEWLINE);
          }
        }
        writer.write(CLOSED_BRACK);
        writer.write(NEWLINE);
        writer.write(CLOSED_BRACK);
        writer.write(NEWLINE);
      }
      writer.write("return xys;");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);

      // getSopUsers function
      writer.write("public ArrayList getSopUsers()");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      writer.write("return sopUsers;");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);

      // TileData class:
      writer.write("protected class TileData");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      writer.write("int baseKey;");
      writer.write(NEWLINE);
      writer.write("int fringeKey;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("public TileData(int b, int f)");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      writer.write("baseKey = b;");
      writer.write(NEWLINE);
      writer.write("fringeKey = f;");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);

      // setBase function:
      writer.write("public void setBase(int b)");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      writer.write("baseKey = b;");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);

      // setFringe function:
      writer.write("public void setFringe(int f)");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      writer.write("fringeKey = f;");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);

      // getBase function:
      writer.write("public Image getBase()");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      writer.write("return MapData.getImage(baseKey);");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);

      // getFringe function:
      writer.write("public Image getFringe()");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      writer.write("return MapData.getImage(fringeKey);");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.close();
    } catch (IOException e) {
      JOptionPane.showMessageDialog(null, ("Error writing file "
          + ssmFile.getPath() + ": " + e.toString()), "File IO Error",
          JOptionPane.WARNING_MESSAGE);
    }
  }
}