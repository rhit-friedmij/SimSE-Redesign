/*
 * This class is responsible for generating all of the code for the logic's
 * ParticipantSelectionDialogsDriver component
 */

package simse.codegenerator.logicgenerator.dialoggenerator;

import simse.codegenerator.CodeGeneratorConstants;
import simse.codegenerator.CodeGeneratorUtils;

import simse.modelbuilder.actionbuilder.ActionType;
import simse.modelbuilder.actionbuilder.ActionTypeParticipantAttributeConstraint;
import simse.modelbuilder.actionbuilder.ActionTypeParticipantConstraint;
import simse.modelbuilder.actionbuilder.ActionTypeParticipantTrigger;
import simse.modelbuilder.actionbuilder.ActionTypeTrigger;
import simse.modelbuilder.actionbuilder.DefinedActionTypes;
import simse.modelbuilder.actionbuilder.UserActionTypeTrigger;
import simse.modelbuilder.objectbuilder.AttributeTypes;
import simse.modelbuilder.rulebuilder.Rule;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import java.util.Vector;

import javax.swing.JOptionPane;

public class ParticipantSelectionDialogsDriverGenerator implements
    CodeGeneratorConstants {
  private File directory; // directory to generate into
  private File psddFile; // file to generate
  private DefinedActionTypes actTypes; // holds all of the defined action types

  public ParticipantSelectionDialogsDriverGenerator(DefinedActionTypes actTypes,
      File directory) {
    this.directory = directory;
    this.actTypes = actTypes;
  }

  public void generate() {
    try {
      psddFile = new File(directory,
          ("simse\\logic\\dialogs\\ParticipantSelectionDialogsDriver.java"));
      if (psddFile.exists()) {
        psddFile.delete(); // delete old version of file
      }
      FileWriter writer = new FileWriter(psddFile);
      writer
          .write("/* File generated by: simse.codegenerator.logicgenerator.dialoggenerator.ParticipantSelectionDialogsDriverGenerator */");
      writer.write(NEWLINE);
      // package statement:
      writer.write("package simse.logic.dialogs;");
      writer.write(NEWLINE);
      // imports:
      writer.write("import simse.state.*;");
      writer.write(NEWLINE);
      writer.write("import simse.adts.objects.*;");
      writer.write(NEWLINE);
      writer.write("import simse.adts.actions.*;");
      writer.write(NEWLINE);
      writer.write("import simse.logic.*;");
      writer.write(NEWLINE);
      writer.write("import simse.gui.*;");
      writer.write(NEWLINE);
      writer.write("import java.util.*;");
      writer.write(NEWLINE);
      writer.write("import javax.swing.*;");
      writer.write(NEWLINE);
      writer.write("public class ParticipantSelectionDialogsDriver");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      
      // member variables:
      writer.write("private Vector<String> partNames;");
      writer.write(NEWLINE);
      writer.write("private Vector<Vector<? extends SSObject>> partsVector;");
      writer.write(NEWLINE);
      writer.write("private simse.adts.actions.Action action;");
      writer.write(NEWLINE);
      writer.write("private State state;");
      writer.write(NEWLINE);
      writer.write("private Employee selectedEmp;");
      writer.write(NEWLINE);
      writer.write("private RuleExecutor ruleExec;");
      writer.write(NEWLINE);
      writer.write("private DestroyerChecker destChecker;");
      writer.write(NEWLINE);
      writer.write("private String menuText;");
      writer.write(NEWLINE);
      
      // constructor:
      writer
          .write("public ParticipantSelectionDialogsDriver(JFrame gui, Vector<String> pNames, Vector<Vector<? extends SSObject>> parts, simse.adts.actions.Action act, State s, RuleExecutor re, DestroyerChecker dc, Employee emp, String mText)");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      writer.write("partNames = pNames;");
      writer.write(NEWLINE);
      writer.write("partsVector = parts;");
      writer.write(NEWLINE);
      writer.write("action = act;");
      writer.write(NEWLINE);
      writer.write("state = s;");
      writer.write(NEWLINE);
      writer.write("selectedEmp = emp;");
      writer.write(NEWLINE);
      writer.write("ruleExec = re;");
      writer.write(NEWLINE);
      writer.write("destChecker = dc;");
      writer.write(NEWLINE);
      writer.write("menuText = mText;");
      writer.write(NEWLINE);
      writer.write("boolean actionValid = true;");
      writer.write(NEWLINE);
      writer.write("for(int i=0; i<partNames.size(); i++)");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      writer.write("String participantName = partNames.elementAt(i);");
      writer.write(NEWLINE);
      writer.write("Vector<? extends SSObject> participants = partsVector.elementAt(i);");
      writer.write(NEWLINE);
      writer
          .write("// check to see if any of these possible participants have already been added to the action in a different role:");
      writer.write(NEWLINE);
      writer.write("Vector<SSObject> allParts = action.getAllParticipants();");
      writer.write(NEWLINE);
      writer.write("Enumeration participantsEnum = participants.elements();");
      writer.write(NEWLINE);
      writer.write("while(participantsEnum.hasMoreElements())");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      writer
          .write("SSObject tempObj = (SSObject)participantsEnum.nextElement();");
      writer.write(NEWLINE);
      writer.write("for(int k=0; k<allParts.size(); k++)");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      writer.write("SSObject tempObj2 = allParts.elementAt(k);");
      writer.write(NEWLINE);
      writer.write("if(tempObj == tempObj2)");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      writer.write("participants.remove(tempObj);");
      writer.write(NEWLINE);
      writer.write("break;");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);

      writer
          .write("if((participants.size() == 0) || (participants.elementAt(0) instanceof Employee))");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      writer.write("for(int j=0; j<allParts.size(); j++)");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      writer.write("SSObject tempObj = allParts.elementAt(j);");
      writer.write(NEWLINE);
      writer.write("if((selectedEmp != null) && (tempObj == selectedEmp))");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      writer.write("selectedEmp = null;");
      writer.write(NEWLINE);
      writer.write("break;");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write("boolean participantsContainsSelEmp = false;");
      writer.write(NEWLINE);
      writer.write("Iterator participantsIterator = participants.iterator();");
      writer.write(NEWLINE);
      writer.write("while(participantsIterator.hasNext())");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      writer.write("SSObject tempObj = (SSObject)participantsIterator.next();");
      writer.write(NEWLINE);
      writer.write("if(tempObj == selectedEmp)");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      writer.write("participantsContainsSelEmp = true;");
      writer.write(NEWLINE);
      writer.write("break;");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);

      writer
          .write("if((selectedEmp != null) && (participantsContainsSelEmp)) // selectedEmp needs to be added to the action as one of these participants");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      writer.write("participants.remove(selectedEmp);");
      writer.write(NEWLINE);
      writer
          .write("EmployeeParticipantSelectionDialog psd = new EmployeeParticipantSelectionDialog(gui, participantName, new Vector<SSObject>(participants), action, state, selectedEmp);");
      writer.write(NEWLINE);
      writer.write("if(psd.actionCancelled())");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      writer.write("actionValid = false;");
      writer.write(NEWLINE);
      writer.write("break;");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write("else // pass null in instead of selectedEmp");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      writer
          .write("EmployeeParticipantSelectionDialog psd = new EmployeeParticipantSelectionDialog(gui, participantName, new Vector<SSObject>(participants), action, state, null);");
      writer.write(NEWLINE);
      writer.write("if(psd.actionCancelled())");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      writer.write("actionValid = false;");
      writer.write(NEWLINE);
      writer.write("break;");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);

      writer.write("else");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      writer
          .write("NonEmployeeParticipantSelectionDialog psd = new NonEmployeeParticipantSelectionDialog(gui, participantName, new Vector<SSObject>(participants), action, state);");
      writer.write(NEWLINE);
      writer.write("if(psd.actionCancelled())");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      writer.write("actionValid = false;");
      writer.write(NEWLINE);
      writer.write("break;");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write("if(actionValid)");
      writer.write(NEWLINE);
      writer.write(OPEN_BRACK);
      writer.write(NEWLINE);
      // gather all of the action types w/ user triggers:
      Vector<ActionType> acts = actTypes.getAllActionTypes();
      Vector<ActionType> userActs = new Vector<ActionType>();
      for (int i = 0; i < acts.size(); i++) {
        ActionType act = acts.elementAt(i);
        Vector<ActionTypeTrigger> allTrigs = act.getAllTriggers();
        for (int j = 0; j < allTrigs.size(); j++) {
          ActionTypeTrigger tempTrig = allTrigs.elementAt(j);
          if (tempTrig instanceof UserActionTypeTrigger) {
            userActs.add(act);
            break;
          }
        }
      }

      // go through each action type:
      for (int i = 0; i < userActs.size(); i++) {
        ActionType tempAct = userActs.elementAt(i);
        if (i > 0) { // not on first element
          writer.write("else ");
        }
        writer.write("if(action instanceof "
            + CodeGeneratorUtils.getUpperCaseLeading(tempAct.getName()) + 
            "Action)");
        writer.write(NEWLINE);
        writer.write(OPEN_BRACK);
        writer.write(NEWLINE);
        writer.write("Vector<SSObject> participants = action.getAllParticipants();");
        writer.write(NEWLINE);
        writer.write("for(int i=0; i<participants.size(); i++)");
        writer.write(NEWLINE);
        writer.write(OPEN_BRACK);
        writer.write(NEWLINE);
        writer.write("SSObject obj = participants.elementAt(i);");
        writer.write(NEWLINE);
        writer.write("if(obj instanceof Employee)");
        writer.write(NEWLINE);
        writer.write(OPEN_BRACK);
        writer.write(NEWLINE);

        // generate conditions for each user trigger:
        Vector<ActionTypeTrigger> allTrigs = tempAct.getAllTriggers();
        boolean putElse9 = false;
        for (int j = 0; j < allTrigs.size(); j++) {
          ActionTypeTrigger tempTrig = allTrigs.elementAt(j);
          if ((tempTrig instanceof UserActionTypeTrigger)
              && (tempTrig.getTriggerText() != null)
              && (tempTrig.getTriggerText().length() > 0)) {
            if (putElse9) {
              writer.write("else ");
            } else {
              putElse9 = true;
            }
            writer.write("if(menuText.equals(\""
                + ((UserActionTypeTrigger) tempTrig).getMenuText() + "\"))");
            writer.write(NEWLINE);
            writer.write(OPEN_BRACK);
            writer.write(NEWLINE);
            writer.write("((Employee)obj).setOverheadText(\""
                + tempTrig.getTriggerText() + "\");");
            writer.write(NEWLINE);
            writer.write(CLOSED_BRACK);
            writer.write(NEWLINE);
          }
        }
        writer.write(CLOSED_BRACK);
        writer.write(NEWLINE);
        writer.write("else if(obj instanceof Customer)");
        writer.write(NEWLINE);
        writer.write(OPEN_BRACK);
        writer.write(NEWLINE);

        // generate conditions for each user trigger:
        boolean putElse8 = false;
        for (int j = 0; j < allTrigs.size(); j++) {
          ActionTypeTrigger tempTrig = allTrigs.elementAt(j);
          if ((tempTrig instanceof UserActionTypeTrigger)
              && (tempTrig.getTriggerText() != null)
              && (tempTrig.getTriggerText().length() > 0)) {
            if (putElse8) {
              writer.write("else ");
            } else {
              putElse8 = true;
            }
            writer.write("if(menuText.equals(\""
                + ((UserActionTypeTrigger) tempTrig).getMenuText() + "\"))");
            writer.write(NEWLINE);
            writer.write(OPEN_BRACK);
            writer.write(NEWLINE);
            writer.write("((Customer)obj).setOverheadText(\""
                + tempTrig.getTriggerText() + "\");");
            writer.write(NEWLINE);
            writer.write(CLOSED_BRACK);
            writer.write(NEWLINE);
          }
        }
        writer.write(CLOSED_BRACK);
        writer.write(NEWLINE);
        writer.write(CLOSED_BRACK);
        writer.write(NEWLINE);
        writer.write("state.getActionStateRepository().get"
            + CodeGeneratorUtils.getUpperCaseLeading(tempAct.getName())
            + "ActionStateRepository().add(("
            + CodeGeneratorUtils.getUpperCaseLeading(tempAct.getName()) + 
            "Action)action);");
        writer.write(NEWLINE);
        // execute all trigger rules:
        Vector<Rule> trigRules = tempAct.getAllTriggerRules();
        for (int j = 0; j < trigRules.size(); j++) {
          Rule tRule = trigRules.elementAt(j);
          writer.write("ruleExec.update(gui, RuleExecutor.UPDATE_ONE, \""
              + tRule.getName() + "\", action);");
          writer.write(NEWLINE);
        }
        writer.write("destChecker.update(false, gui);");
        writer.write(NEWLINE);

        // game-ending:
        if (tempAct.hasGameEndingTrigger()) {
          Vector<ActionTypeTrigger> trigs = tempAct.getAllTriggers();
          boolean putElse7 = false;
          for (int j = 0; j < trigs.size(); j++) {
            ActionTypeTrigger tempTrig = trigs.elementAt(j);
            if (tempTrig.isGameEndingTrigger()) {
              if (putElse7) {
                writer.write("else ");
              } else {
                putElse7 = true;
              }
              writer.write("if(menuText.equals(\""
                  + ((UserActionTypeTrigger) tempTrig).getMenuText() + "\"))");
              writer.write(NEWLINE);
              writer.write(OPEN_BRACK);
              writer.write(NEWLINE);

              writer.write("// stop game and give score:");
              writer.write(NEWLINE);
              writer.write(CodeGeneratorUtils.getUpperCaseLeading(
              		tempAct.getName()) + "Action a = (" + 
              		CodeGeneratorUtils.getUpperCaseLeading(tempAct.getName()) + 
              		"Action)action;");
              writer.write(NEWLINE);
              // find the scoring attribute:
              ActionTypeParticipantTrigger scoringPartTrig = null;
              ActionTypeParticipantConstraint scoringPartConst = null;
              ActionTypeParticipantAttributeConstraint scoringAttConst = null;
              Vector<ActionTypeParticipantTrigger> partTrigs = 
              	tempTrig.getAllParticipantTriggers();
              for (int k = 0; k < partTrigs.size(); k++) {
                ActionTypeParticipantTrigger partTrig = partTrigs.elementAt(k);
                Vector<ActionTypeParticipantConstraint> partConsts = 
                	partTrig.getAllConstraints();
                for (int m = 0; m < partConsts.size(); m++) {
                  ActionTypeParticipantConstraint partConst = 
                  	partConsts.elementAt(m);
                  ActionTypeParticipantAttributeConstraint[] attConsts = 
                  	partConst.getAllAttributeConstraints();
                  for (int n = 0; n < attConsts.length; n++) {
                    if (attConsts[n].isScoringAttribute()) {
                      scoringAttConst = attConsts[n];
                      scoringPartConst = partConst;
                      scoringPartTrig = partTrig;
                      break;
                    }
                  }
                }
              }
              if ((scoringAttConst != null) && (scoringPartConst != null)
                  && (scoringPartTrig != null)) {
                writer.write("if(a.getAll"
                    + scoringPartTrig.getParticipant().getName()
                    + "s().size() > 0)");
                writer.write(NEWLINE);
                writer.write(OPEN_BRACK);
                writer.write(NEWLINE);
                writer.write(CodeGeneratorUtils.getUpperCaseLeading(
                		scoringPartConst.getSimSEObjectType().getName()) + 
                		" t = (" + CodeGeneratorUtils.getUpperCaseLeading(
                				scoringPartConst.getSimSEObjectType().getName()) + 
                				")(a.getAll" + 
                				scoringPartTrig.getParticipant().getName() + 
                				"s().elementAt(0));");
                writer.write(NEWLINE);
                writer.write("if(t != null)");
                writer.write(NEWLINE);
                writer.write(OPEN_BRACK);
                writer.write(NEWLINE);
                if (scoringAttConst.getAttribute().getType() == 
                	AttributeTypes.INTEGER) {
                  writer.write("int");
                } else if (scoringAttConst.getAttribute().getType() == 
                	AttributeTypes.DOUBLE) {
                  writer.write("double");
                } else if (scoringAttConst.getAttribute().getType() == 
                	AttributeTypes.STRING) {
                  writer.write("String");
                } else if (scoringAttConst.getAttribute().getType() == 
                	AttributeTypes.BOOLEAN) {
                  writer.write("boolean");
                }
                writer.write(" v = t.get"
                    + scoringAttConst.getAttribute().getName() + "();");
                writer.write(NEWLINE);
                writer.write("state.getClock().stop();");
                writer.write(NEWLINE);
                writer.write("state.setScore(v);");
                writer.write(NEWLINE);
                writer.write("((SimSEGUI)gui).update();");
                writer.write(NEWLINE);
                writer
                    .write("JOptionPane.showMessageDialog(null, (\"Your score is \" + v), \"Game over!\", JOptionPane.INFORMATION_MESSAGE);");
                writer.write(NEWLINE);
                writer.write(CLOSED_BRACK);
                writer.write(NEWLINE);
                writer.write(CLOSED_BRACK);
                writer.write(NEWLINE);
                writer.write(CLOSED_BRACK);
                writer.write(NEWLINE);
              }
            }
          }
        }
        writer.write(CLOSED_BRACK);
        writer.write(NEWLINE);
      }
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.close();
    } catch (IOException e) {
      JOptionPane.showMessageDialog(null, ("Error writing file "
          + psddFile.getPath() + ": " + e.toString()), "File IO Error",
          JOptionPane.WARNING_MESSAGE);
    }
  }
}