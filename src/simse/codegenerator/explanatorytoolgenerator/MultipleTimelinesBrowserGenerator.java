/*
 * This class is responsible for generating all of the code for the 
 * MultipleTimelinesBrowser class in the explanatory tool
 */

package simse.codegenerator.explanatorytoolgenerator;

import simse.codegenerator.CodeGeneratorConstants;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import javax.swing.JOptionPane;

public class MultipleTimelinesBrowserGenerator implements 
CodeGeneratorConstants {
  private File directory; // directory to save generated code into

  public MultipleTimelinesBrowserGenerator(File directory) {
    this.directory = directory;
  }

  public void generate() {
    File browserFile = new File(directory,
        ("simse\\explanatorytool\\MultipleTimelinesBrowser.java"));
    if (browserFile.exists()) {
      browserFile.delete(); // delete old version of file
    }
    try {
      FileWriter writer = new FileWriter(browserFile);
      writer
          .write("/* File generated by: simse.codegenerator.explanatorytoolgenerator.MultipleTimelinesBrowserGenerator */");
      writer.write(NEWLINE);
      writer.write("package simse.explanatorytool;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("import simse.SimSE;");
      writer.write(NEWLINE);
      writer.write("import simse.gui.SimSEGUI;");
      writer.write(NEWLINE);
      writer.write("import simse.state.Clock;");
      writer.write(NEWLINE);
      writer.write("import simse.state.State;");
      writer.write(NEWLINE);
      writer.write("import simse.state.logger.Logger;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("import org.jfree.chart.annotations.XYTextAnnotation;");
      writer.write(NEWLINE);
      writer.write("import org.jfree.chart.ChartFactory;");
      writer.write(NEWLINE);
      writer.write("import org.jfree.chart.ChartMouseEvent;");
      writer.write(NEWLINE);
      writer.write("import org.jfree.chart.ChartMouseListener;");
      writer.write(NEWLINE);
      writer.write("import org.jfree.chart.ChartPanel;");
      writer.write(NEWLINE);
      writer.write("import org.jfree.chart.ChartRenderingInfo;");
      writer.write(NEWLINE);
      writer.write("import org.jfree.chart.JFreeChart;");
      writer.write(NEWLINE);
      writer.write("import org.jfree.chart.axis.NumberAxis;");
      writer.write(NEWLINE);
      writer.write("import org.jfree.chart.axis.ValueAxis;");
      writer.write(NEWLINE);
      writer.write("import org.jfree.chart.plot.PlotOrientation;");
      writer.write(NEWLINE);
      writer.write("import org.jfree.chart.plot.XYPlot;");
      writer.write(NEWLINE);
      writer.write("import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;");
      writer.write(NEWLINE);
      writer.write("import org.jfree.data.Range;");
      writer.write(NEWLINE);
      writer.write("import org.jfree.data.xy.XYDataItem;");
      writer.write(NEWLINE);
      writer.write("import org.jfree.data.xy.XYDataset;");
      writer.write(NEWLINE);
      writer.write("import org.jfree.data.xy.XYSeries;");
      writer.write(NEWLINE);
      writer.write("import org.jfree.data.xy.XYSeriesCollection;");
      writer.write(NEWLINE);
      writer.write("import org.jfree.ui.RectangleEdge;");
      writer.write(NEWLINE);
      writer.write("import org.jfree.ui.RectangleInsets;");
      writer.write(NEWLINE);
      writer.write("import org.jfree.ui.RefineryUtilities;");
      writer.write(NEWLINE);
      writer.write("import org.jfree.ui.TextAnchor;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("import java.awt.BasicStroke;");
      writer.write(NEWLINE);
      writer.write("import java.awt.Color;");
      writer.write(NEWLINE);
      writer.write("import java.awt.Font;");
      writer.write(NEWLINE);
      writer.write("import java.awt.Frame;");
      writer.write(NEWLINE);
      writer.write("import java.awt.Point;");
      writer.write(NEWLINE);
      writer.write("import java.awt.event.ActionEvent;");
      writer.write(NEWLINE);
      writer.write("import java.awt.event.ActionListener;");
      writer.write(NEWLINE);
      writer.write("import java.awt.event.MouseEvent;");
      writer.write(NEWLINE);
      writer.write("import java.awt.event.MouseListener;");
      writer.write(NEWLINE);
      writer.write("import java.awt.event.WindowAdapter;");
      writer.write(NEWLINE);
      writer.write("import java.awt.event.WindowEvent;");
      writer.write(NEWLINE);
      writer.write("import java.awt.geom.Point2D;");
      writer.write(NEWLINE);
      writer.write("import java.awt.geom.Rectangle2D;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("import java.util.ArrayList;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("import javax.swing.JFrame;");
      writer.write(NEWLINE);
      writer.write("import javax.swing.JMenuItem;");
      writer.write(NEWLINE);
      writer.write("import javax.swing.JOptionPane;");
      writer.write(NEWLINE);
      writer.write("import javax.swing.JSeparator;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("public class MultipleTimelinesBrowser extends JFrame implements MouseListener, ActionListener, ChartMouseListener {");
      writer.write(NEWLINE);
      writer.write("private static final String ROOT_GAME_NAME = \"ROOT GAME\";");
      writer.write(NEWLINE);
      writer.write("private JFreeChart chart; // chart object");
      writer.write(NEWLINE);
      writer.write("private ChartPanel chartPanel;");
      writer.write(NEWLINE);
      writer.write("private JMenuItem newBranchItem;");
      writer.write(NEWLINE);
      writer.write("private JSeparator separator;");
      writer.write(NEWLINE);
      writer.write("private Branch lastRightClickedBranch; // last branch that was right-clicked on");
      writer.write(NEWLINE);
      writer.write("private int lastRightClickedX; // last x-val that was right-clicked on");
      writer.write(NEWLINE);
      writer.write("private XYSeriesCollection dataset;");
      writer.write(NEWLINE);
      writer.write("private int unnamedBranchesIndex;");
      writer.write(NEWLINE);
      writer.write("public MultipleTimelinesBrowser() {");
      writer.write(NEWLINE);
      writer.write("super();");
      writer.write(NEWLINE);
      writer.write("setTitle(\"Multiple Timelines Browser\");");
      writer.write(NEWLINE);
      writer.write("// create dataset:");
      writer.write(NEWLINE);
      writer.write("dataset = new XYSeriesCollection();");
      writer.write(NEWLINE);
      writer.write("XYDataset xydataset = createDataset();");
      writer.write(NEWLINE);
      writer.write("chart = createChart(xydataset);");
      writer.write(NEWLINE);
      writer.write("resetAnnotations();");
      writer.write(NEWLINE);
      writer.write("setSeriesStrokes();");
      writer.write(NEWLINE);
      writer.write("chartPanel = new ChartPanel(chart);");
      writer.write(NEWLINE);
      writer.write("chartPanel.addChartMouseListener(this);");
      writer.write(NEWLINE);
      writer.write("chartPanel.addMouseListener(this);");
      writer.write(NEWLINE);
      writer.write("chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));");
      writer.write(NEWLINE);
      writer.write("setContentPane(chartPanel);");
      writer.write(NEWLINE);
      writer.write("newBranchItem = new JMenuItem(\"Start new game from here\");");
      writer.write(NEWLINE);
      writer.write("newBranchItem.addActionListener(this);");
      writer.write(NEWLINE);
      writer.write("separator = new JSeparator();");
      writer.write(NEWLINE);
      writer.write("lastRightClickedBranch = null;");
      writer.write(NEWLINE);
      writer.write("lastRightClickedX = -1;");
      writer.write(NEWLINE);
      writer.write("pack();");
      writer.write(NEWLINE);
      writer.write("RefineryUtilities.centerFrameOnScreen(this);");
      writer.write(NEWLINE);
      writer.write("addWindowListener(new ExitListener());");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("unnamedBranchesIndex = 0;");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// Creates the dataset for this graph");
      writer.write(NEWLINE);
      writer.write("private XYDataset createDataset() {");
      writer.write(NEWLINE);
      writer.write("for (int i = 0; i < SimSE.getBranches().size(); i++) {");
      writer.write(NEWLINE);
      writer.write("Branch b = SimSE.getBranches().get(i);");
      writer.write(NEWLINE);
      writer.write("XYSeries newSeries = null;");
      writer.write(NEWLINE);
      writer.write("if (b.getRoot() == null) { // root game");
      writer.write(NEWLINE);
      writer.write("newSeries = new XYSeries(ROOT_GAME_NAME);");
      writer.write(NEWLINE);
      writer.write("} else { // non-root game");
      writer.write(NEWLINE);
      writer.write("if (b.getName() == null) {");
      writer.write(NEWLINE);
      writer.write("newSeries = new XYSeries(unnamedBranchesIndex);");
      writer.write(NEWLINE);
      writer.write("unnamedBranchesIndex++;");
      writer.write(NEWLINE);
      writer.write("} else { // game has a name");
      writer.write(NEWLINE);
      writer.write("newSeries = new XYSeries(b.getName());");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write("// add branch line:");
      writer.write(NEWLINE);
      writer.write("for (int j = 0; j < SimSE.getBranches().size(); j++) {");
      writer.write(NEWLINE);
      writer.write("// find root:");
      writer.write(NEWLINE);
      writer.write("if (SimSE.getBranches().get(j) == b.getRoot()) { // found the root");
      writer.write(NEWLINE);
      writer.write("newSeries.add(b.getStartTick(), (j * 10 + 1));");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write("newSeries.add(b.getStartTick(), (i * 10 + 1));");
      writer.write(NEWLINE);
      writer.write("newSeries.add(b.getEndTick(), (i * 10 + 1));");
      writer.write(NEWLINE);
      writer.write("dataset.addSeries(newSeries);");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write("return dataset;");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// Creates the chart for this graph");
      writer.write(NEWLINE);
      writer.write("private JFreeChart createChart(XYDataset dataset) {");
      writer.write(NEWLINE);
      writer.write("// create the chart:");
      writer.write(NEWLINE);
      writer.write("JFreeChart chart = ChartFactory.createXYLineChart(this.getTitle(), \"Clock Ticks\", null, dataset, PlotOrientation.VERTICAL, true, true, false);");
      writer.write(NEWLINE);
      writer.write("chart.setBackgroundPaint(Color.white);");
      writer.write(NEWLINE);
      writer.write("XYPlot plot = (XYPlot) chart.getPlot();");
      writer.write(NEWLINE);
      writer.write("plot.setBackgroundPaint(Color.WHITE);");
      writer.write(NEWLINE);
      writer.write("plot.setAxisOffset(new RectangleInsets(5.0, 5.0, 5.0, 5.0));");
      writer.write(NEWLINE);
      writer.write("plot.setDomainGridlinesVisible(true);");
      writer.write(NEWLINE);
      writer.write("plot.setRangeGridlinesVisible(false);");
      writer.write(NEWLINE);
      writer.write("ValueAxis rangeAxis = plot.getRangeAxis();");
      writer.write(NEWLINE);
      writer.write("rangeAxis.setTickLabelsVisible(false);");
      writer.write(NEWLINE);
      writer.write("rangeAxis.setTickMarksVisible(false);");
      writer.write(NEWLINE);
      writer.write("rangeAxis.setAxisLineVisible(false);");
      writer.write(NEWLINE);
      writer.write("rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());");
      writer.write(NEWLINE);
      writer.write("XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) plot.getRenderer();");
      writer.write(NEWLINE);
      writer.write("renderer.setShapesVisible(false);");
      writer.write(NEWLINE);
      writer.write("renderer.setShapesFilled(false);");
      writer.write(NEWLINE);
      writer.write("renderer.setDrawSeriesLineAsPath(true);");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// change the auto tick unit selection to integer units only:");
      writer.write(NEWLINE);
      writer.write("NumberAxis domainAxis = (NumberAxis) plot.getDomainAxis();");
      writer.write(NEWLINE);
      writer.write("domainAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("return chart;");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("public void update() {");
      writer.write(NEWLINE);
      writer.write("if (SimSE.getBranches().size() > dataset.getSeriesCount()) { // need to add new series");
      writer.write(NEWLINE);
      writer.write("int numNewSeries = SimSE.getBranches().size() - dataset.getSeriesCount();");
      writer.write(NEWLINE);
      writer.write("while (numNewSeries > 0) {");
      writer.write(NEWLINE);
      writer.write("Branch newBranch = SimSE.getBranches().get(dataset.getSeriesCount());");
      writer.write(NEWLINE);
      writer.write("XYSeries newSeries = null;");
      writer.write(NEWLINE);
      writer.write("if (newBranch.getRoot() == null) { // root game");
      writer.write(NEWLINE);
      writer.write("newSeries = new XYSeries(ROOT_GAME_NAME);");
      writer.write(NEWLINE);
      writer.write("} else { // non-root game");
      writer.write(NEWLINE);
      writer.write("if (newBranch.getName() == null) {");
      writer.write(NEWLINE);
      writer.write("newSeries = new XYSeries(unnamedBranchesIndex);");
      writer.write(NEWLINE);
      writer.write("unnamedBranchesIndex++;");
      writer.write(NEWLINE);
      writer.write("} else { // game has a name");
      writer.write(NEWLINE);
      writer.write("newSeries = new XYSeries(newBranch.getName());");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write("// add branch line:");
      writer.write(NEWLINE);
      writer.write("for (int j = 0; j < SimSE.getBranches().size(); j++) {");
      writer.write(NEWLINE);
      writer.write("// find root:");
      writer.write(NEWLINE);
      writer.write("if (SimSE.getBranches().get(j) == newBranch.getRoot()) { // found the root");
      writer.write(NEWLINE);
      writer.write("newSeries.add(newBranch.getStartTick(), (j * 10 + 1));");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write("dataset.addSeries(newSeries);");
      writer.write(NEWLINE);
      writer.write("newSeries.add(newBranch.getStartTick(), (dataset.indexOf(newSeries.getKey()) * 10 + 1));");
      writer.write(NEWLINE);
      writer.write("newSeries.add(newBranch.getEndTick(), (dataset.indexOf(newSeries.getKey()) * 10 + 1));");
      writer.write(NEWLINE);
      writer.write("((XYLineAndShapeRenderer)((XYPlot)chart.getPlot()).getRenderer()).setSeriesStroke((dataset.getSeriesCount() - 1), new BasicStroke(10));");
      writer.write(NEWLINE);
      writer.write("numNewSeries--;");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write("// add a new end data point for each series if needed");
      writer.write(NEWLINE);
      writer.write("for (int i = 0; i < SimSE.getBranches().size(); i++) {");
      writer.write(NEWLINE);
      writer.write("// check each branch's series and see if its largest x value is less than");
      writer.write(NEWLINE);
      writer.write("// that branch's endTick. if so, add a new point:");
      writer.write(NEWLINE);
      writer.write("Branch b = SimSE.getBranches().get(i);");
      writer.write(NEWLINE);
      writer.write("if (!b.isClosed() && ((b.getScore() == null) || (b.getScore().equals(\"-1\")))) { // game is open and hasn't ended yet");
      writer.write(NEWLINE);
      writer.write("int itemCount = dataset.getSeries(i).getItemCount();");
      writer.write(NEWLINE);
      writer.write("XYDataItem lastItem = dataset.getSeries(i).getDataItem(itemCount - 1);");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("if (lastItem.getX().intValue() < b.getEndTick()) { // series needs to be updated with new end tick");
      writer.write(NEWLINE);
      writer.write("dataset.getSeries(i).add(b.getEndTick(), (i * 10 + 1));");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write("setSeriesStrokes();");
      writer.write(NEWLINE);
      writer.write("resetAnnotations();");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("private void resetAnnotations() {");
      writer.write(NEWLINE);
      writer.write("XYPlot plot = (XYPlot)chart.getPlot();");
      writer.write(NEWLINE);
      writer.write("plot.clearAnnotations();");
      writer.write(NEWLINE);
      writer.write("Font font = new Font(\"SansSerif\", Font.BOLD, 12);");
      writer.write(NEWLINE);
      writer.write("for (int i = 0; i < SimSE.getBranches().size(); i++) {");
      writer.write(NEWLINE);
      writer.write("Branch b = SimSE.getBranches().get(i);");
      writer.write(NEWLINE);
      writer.write("String str = new String();");
      writer.write(NEWLINE);
      writer.write("if (b.getScore() != null && !b.getScore().equals(\"-1\")) { // has a score");
      writer.write(NEWLINE);
      writer.write("str = \"  \" + b.getScore();");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write("if (str.length() > 0) {");
      writer.write(NEWLINE);
      writer.write("XYTextAnnotation annotation = new XYTextAnnotation(str, b.getEndTick(), i * 10 + 1);");
      writer.write(NEWLINE);
      writer.write("annotation.setTextAnchor(TextAnchor.HALF_ASCENT_LEFT);");
      writer.write(NEWLINE);
      writer.write("annotation.setFont(font);");
      writer.write(NEWLINE);
      writer.write("plot.addAnnotation(annotation);");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("private void setSeriesStrokes() {");
      writer.write(NEWLINE);
      writer.write("XYPlot plot = (XYPlot) chart.getPlot();");
      writer.write(NEWLINE);
      writer.write("XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) plot.getRenderer();");
      writer.write(NEWLINE);
      writer.write("for (int i = 0; i < dataset.getSeriesCount(); i++) {");
      writer.write(NEWLINE);
      writer.write("if (SimSE.getBranches().get(i).isClosed()) { // make dashed line");
      writer.write(NEWLINE);
      writer.write("renderer.setSeriesStroke(i, new BasicStroke(10, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1.0f, new float[] {5.0f, 5.0f}, 10.0f));");
      writer.write(NEWLINE);
      writer.write("} else { // game is open; make solid line");
      writer.write(NEWLINE);
      writer.write("renderer.setSeriesStroke(i, new BasicStroke(10));");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// responds to LEFT mouse clicks on the chart");
      writer.write(NEWLINE);
      writer.write("public void chartMouseClicked(ChartMouseEvent event) {");
      writer.write(NEWLINE);
      writer.write("if (event.getTrigger().getButton() == MouseEvent.BUTTON1) { // left-click");
      writer.write(NEWLINE);
      writer.write("Branch b = getBranchClickedOn(event.getTrigger());");
      writer.write(NEWLINE);
      writer.write("if (b != null) {");
      writer.write(NEWLINE);
      writer.write("// find branch index:");
      writer.write(NEWLINE);
      writer.write("for (int i = 0; i < SimSE.getBranches().size(); i++) {");
      writer.write(NEWLINE);
      writer.write("Branch tempBranch = SimSE.getBranches().get(i);");
      writer.write(NEWLINE);
      writer.write("if (b == tempBranch) {");
      writer.write(NEWLINE);
      writer.write("// bring up branch (if not closed):");
      writer.write(NEWLINE);
      writer.write("SimSEGUI g = SimSE.getGUIs().get(i);");
      writer.write(NEWLINE);
      writer.write("if (!b.isClosed()) {");
      writer.write(NEWLINE);
      writer.write("if (g.getState() == Frame.ICONIFIED) {");
      writer.write(NEWLINE);
      writer.write("g.setState(Frame.NORMAL);");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write("g.setVisible(true);");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("public void chartMouseMoved(ChartMouseEvent event) {}");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// responds to RIGHT-clicks on the chart");
      writer.write(NEWLINE);
      writer.write("public void mouseReleased(MouseEvent me) {");
      writer.write(NEWLINE);
      writer.write("if (me.getButton() != MouseEvent.BUTTON1) { // not left-click");
      writer.write(NEWLINE);
      writer.write("Branch b = getBranchClickedOn(me);");
      writer.write(NEWLINE);
      writer.write("boolean valid = true;");
      writer.write(NEWLINE);
      writer.write("if ((b != null) && (!b.isClosed()) && (b.getEndTick() != b.getStartTick())) { // clicked on a valid branch");
      writer.write(NEWLINE);
      writer.write("lastRightClickedBranch = b;");
      writer.write(NEWLINE);
      writer.write("if (chartPanel.getPopupMenu().getComponentIndex(newBranchItem) == -1) { // no new branch item on menu currently");
      writer.write(NEWLINE);
      writer.write("chartPanel.getPopupMenu().add(separator);");
      writer.write(NEWLINE);
      writer.write("chartPanel.getPopupMenu().add(newBranchItem);");
      writer.write(NEWLINE);
      writer.write("chartPanel.getPopupMenu().pack();");
      writer.write(NEWLINE);
      writer.write("chartPanel.getPopupMenu().repaint();");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// set last right clicked X:");
      writer.write(NEWLINE);
      writer.write("XYPlot plot = chart.getXYPlot();");
      writer.write(NEWLINE);
      writer.write("Range domainRange = plot.getDataRange(plot.getDomainAxis());");
      writer.write(NEWLINE);
      writer.write("if (domainRange != null) { // chart is not blank");
      writer.write(NEWLINE);
      writer.write("Point2D pt = chartPanel.translateScreenToJava2D(new Point(me.getX(), me.getY()));");
      writer.write(NEWLINE);
      writer.write("ChartRenderingInfo info = this.chartPanel.getChartRenderingInfo();");
      writer.write(NEWLINE);
      writer.write("Rectangle2D dataArea = info.getPlotInfo().getDataArea();");
      writer.write(NEWLINE);
      writer.write("NumberAxis domainAxis = (NumberAxis) plot.getDomainAxis();");
      writer.write(NEWLINE);
      writer.write("RectangleEdge domainAxisEdge = plot.getDomainAxisEdge();");
      writer.write(NEWLINE);
      writer.write("double chartX = domainAxis.java2DToValue(pt.getX(), dataArea, domainAxisEdge);");
      writer.write(NEWLINE);
      writer.write("int intX = (int) Math.rint(chartX);");
      writer.write(NEWLINE);
      writer.write("if (intX < lastRightClickedBranch.getEndTick()) { // not end tick");
      writer.write(NEWLINE);
      writer.write("lastRightClickedX = intX;");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write("else {");
      writer.write(NEWLINE);
      writer.write("valid = false;");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write("} else { // did not click on a valid branch segment");
      writer.write(NEWLINE);
      writer.write("valid = false;");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write("if (!valid) {");
      writer.write(NEWLINE);
      writer.write("lastRightClickedBranch = null;");
      writer.write(NEWLINE);
      writer.write("lastRightClickedX = -1;");
      writer.write(NEWLINE);
      writer.write("if (chartPanel.getPopupMenu().getComponentIndex(newBranchItem) >= 0) {");
      writer.write(NEWLINE);
      writer.write("// new branch item currently on menu");
      writer.write(NEWLINE);
      writer.write("chartPanel.getPopupMenu().remove(newBranchItem);");
      writer.write(NEWLINE);
      writer.write("if (chartPanel.getPopupMenu().getComponentIndex(separator) >= 0) {");
      writer.write(NEWLINE);
      writer.write("// has separator");
      writer.write(NEWLINE);
      writer.write("chartPanel.getPopupMenu().remove(separator);");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write("chartPanel.getPopupMenu().pack();");
      writer.write(NEWLINE);
      writer.write("chartPanel.getPopupMenu().repaint();");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("public void mousePressed(MouseEvent me) {}");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("public void mouseClicked(MouseEvent me) {}");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("public void mouseEntered(MouseEvent me) {}");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("public void mouseExited(MouseEvent me) {}");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("public void actionPerformed(ActionEvent evt) {");
      writer.write(NEWLINE);
      writer.write("if (evt.getSource() == newBranchItem) {");
      writer.write(NEWLINE);
      writer.write("String newBranchName = JOptionPane.showInputDialog(null, \"Please name this new game:\", \"Name New Game\", JOptionPane.QUESTION_MESSAGE);");
      writer.write(NEWLINE);
      writer.write("if (newBranchName != null) {");
      writer.write(NEWLINE);
      writer.write("if ((lastRightClickedBranch != null) && (lastRightClickedX >= 0)) {");
      writer.write(NEWLINE);
      writer.write("// find branch index:");
      writer.write(NEWLINE);
      writer.write("for (int i = 0; i < SimSE.getBranches().size(); i++) {");
      writer.write(NEWLINE);
      writer.write("Branch tempBranch = SimSE.getBranches().get(i);");
      writer.write(NEWLINE);
      writer.write("if (lastRightClickedBranch == tempBranch) {");
      writer.write(NEWLINE);
      writer.write("// bring up branch (if not closed):");
      writer.write(NEWLINE);
      writer.write("SimSEGUI g = SimSE.getGUIs().get(i);");
      writer.write(NEWLINE);
      writer.write("if (!lastRightClickedBranch.isClosed()) {");
      writer.write(NEWLINE);
      writer.write("ArrayList<State> log = g.getSimSEState().getLogger().getLog();");
      writer.write(NEWLINE);
      writer.write("State tempState = (State) log.get(lastRightClickedX).clone();");
      writer.write(NEWLINE);
      writer.write("Logger tempLogger = new Logger(tempState, new ArrayList<State>(log.subList(0, lastRightClickedX)));");
      writer.write(NEWLINE);
      writer.write("Clock tempClock = new Clock(tempLogger, lastRightClickedX);");
      writer.write(NEWLINE);
      writer.write("tempState.setClock(tempClock);");
      writer.write(NEWLINE);
      writer.write("tempState.setLogger(tempLogger);");
      writer.write(NEWLINE);
      writer.write("SimSE.startNewBranch(tempState, new Branch(newBranchName, lastRightClickedX, tempClock.getTime(), lastRightClickedBranch, null));");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("private Branch getBranchClickedOn(MouseEvent me) {");
      writer.write(NEWLINE);
      writer.write("XYPlot plot = chart.getXYPlot();");
      writer.write(NEWLINE);
      writer.write("Range domainRange = plot.getDataRange(plot.getDomainAxis());");
      writer.write(NEWLINE);
      writer.write("if (domainRange != null) { // chart is not blank");
      writer.write(NEWLINE);
      writer.write("Point2D pt = chartPanel.translateScreenToJava2D(new Point(me.getX(), me.getY()));");
      writer.write(NEWLINE);
      writer.write("ChartRenderingInfo info = this.chartPanel.getChartRenderingInfo();");
      writer.write(NEWLINE);
      writer.write("Rectangle2D dataArea = info.getPlotInfo().getDataArea();");
      writer.write(NEWLINE);
      writer.write("NumberAxis domainAxis = (NumberAxis) plot.getDomainAxis();");
      writer.write(NEWLINE);
      writer.write("RectangleEdge domainAxisEdge = plot.getDomainAxisEdge();");
      writer.write(NEWLINE);
      writer.write("double dblX = domainAxis.java2DToValue(pt.getX(), dataArea, domainAxisEdge);");
      writer.write(NEWLINE);
      writer.write("int intX = (int) Math.rint(dblX);");
      writer.write(NEWLINE);
      writer.write("NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();");
      writer.write(NEWLINE);
      writer.write("RectangleEdge rangeAxisEdge = plot.getRangeAxisEdge();");
      writer.write(NEWLINE);
      writer.write("double dblY = rangeAxis.java2DToValue(pt.getY(), dataArea, rangeAxisEdge);");
      writer.write(NEWLINE);
      writer.write("int intY = (int) Math.rint(dblY);");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// first check if it was a vertical branch segment that was clicked on:");
      writer.write(NEWLINE);
      writer.write("// go through all branches and find any that start at that x:");
      writer.write(NEWLINE);
      writer.write("ArrayList<Integer> branchIndices = new ArrayList<Integer>();");
      writer.write(NEWLINE);
      writer.write("for (int i = 0; i < SimSE.getBranches().size(); i++) {");
      writer.write(NEWLINE);
      writer.write("Branch b = SimSE.getBranches().get(i);");
      writer.write(NEWLINE);
      writer.write("if (b.getStartTick() == intX) {");
      writer.write(NEWLINE);
      writer.write("branchIndices.add(new Integer(i));");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// go through all possible branches and check if the clicked-on y val was on its vertical branch:");
      writer.write(NEWLINE);
      writer.write("for (Integer i : branchIndices) {");
      writer.write(NEWLINE);
      writer.write("Branch root = SimSE.getBranches().get(i.intValue()).getRoot();");
      writer.write(NEWLINE);
      writer.write("int rootIndex = -1;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// find index of root:");
      writer.write(NEWLINE);
      writer.write("for (int j = 0; j < SimSE.getBranches().size(); j++) {");
      writer.write(NEWLINE);
      writer.write("if (SimSE.getBranches().get(j) == root) { // found root");
      writer.write(NEWLINE);
      writer.write("rootIndex = j;");
      writer.write(NEWLINE);
      writer.write("break;");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write("if (rootIndex > -1) {");
      writer.write(NEWLINE);
      writer.write("int rootGameYVal = rootIndex * 10 + 1;");
      writer.write(NEWLINE);
      writer.write("int branchYVal = i * 10 + 1;");
      writer.write(NEWLINE);
      writer.write("// check if the clicked-on Y val is between these two vals:");
      writer.write(NEWLINE);
      writer.write("if (intY >= rootGameYVal && intY <= branchYVal) {");
      writer.write(NEWLINE);
      writer.write("return SimSE.getBranches().get(i.intValue());");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// if it wasn't a vertical branch segment that was clicked on, look for a horizontal one:");
      writer.write(NEWLINE);
      writer.write("// get branch w/ that y-value (if there is one):");
      writer.write(NEWLINE);
      writer.write("int adjustedYVal = (intY - 1) / 10;");
      writer.write(NEWLINE);
      writer.write("if (intY >= 0 && adjustedYVal < SimSE.getBranches().size()) {");
      writer.write(NEWLINE);
      writer.write("Branch b = SimSE.getBranches().get(adjustedYVal);");
      writer.write(NEWLINE);
      writer.write("// check if x-val is within range:");
      writer.write(NEWLINE);
      writer.write("if (dblX >= b.getStartTick() && dblX <= b.getEndTick()) {");
      writer.write(NEWLINE);
      writer.write("return b;");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write("return null;");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("public XYPlot getXYPlot() {");
      writer.write(NEWLINE);
      writer.write("return chart.getXYPlot();");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("public String getChartTitle() {");
      writer.write(NEWLINE);
      writer.write("return this.getTitle();");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("public class ExitListener extends WindowAdapter {");
      writer.write(NEWLINE);
      writer.write("public void windowClosing(WindowEvent event) {");
      writer.write(NEWLINE);
      writer.write("if (SimSE.getNumOpenBranches() == 0) {");
      writer.write(NEWLINE);
      writer.write("System.exit(0);");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write("setVisible(false);");
      writer.write(NEWLINE);
      writer.write("dispose();");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);

      writer.write(CLOSED_BRACK);
      writer.close();
    } catch (IOException e) {
      JOptionPane.showMessageDialog(null, ("Error writing file "
          + browserFile.getPath() + ": " + e.toString()), "File IO Error",
          JOptionPane.WARNING_MESSAGE);
    }
  }
}
