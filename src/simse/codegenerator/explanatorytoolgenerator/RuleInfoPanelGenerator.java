/*
 * This class is responsible for generating all of the code for the
 * RuleInfoPanel class in the explanatory tool
 */

package simse.codegenerator.explanatorytoolgenerator;

import simse.codegenerator.CodeGeneratorConstants;
import simse.codegenerator.CodeGeneratorUtils;
import simse.modelbuilder.actionbuilder.ActionType;
import simse.modelbuilder.actionbuilder.DefinedActionTypes;
import simse.modelbuilder.rulebuilder.Rule;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Vector;

import javax.swing.JOptionPane;

public class RuleInfoPanelGenerator implements CodeGeneratorConstants {
  private File directory; // directory to save generated code into
  private DefinedActionTypes actTypes;

  public RuleInfoPanelGenerator(DefinedActionTypes actTypes, File directory) {
    this.actTypes = actTypes;
    this.directory = directory;
  }

  public void generate() {
    File ruleInfoFile = new File(directory,
        ("simse\\explanatorytool\\RuleInfoPanel.java"));
    if (ruleInfoFile.exists()) {
      ruleInfoFile.delete(); // delete old version of file
    }
    try {
      FileWriter writer = new FileWriter(ruleInfoFile);
      writer
          .write("/* File generated by: simse.codegenerator.explanatorytoolgenerator.RuleInfoPanelGenerator */");
      writer.write(NEWLINE);
      writer.write("package simse.explanatorytool;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("import simse.adts.actions.*;");
      writer.write(NEWLINE);
      writer.write("import simse.explanatorytool.RuleDescriptions;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("import javax.swing.*;");
      writer.write(NEWLINE);
      writer.write("import javax.swing.event.ListSelectionEvent;");
      writer.write(NEWLINE);
      writer.write("import javax.swing.event.ListSelectionListener;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("import java.awt.Dimension;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer
          .write("public class RuleInfoPanel extends JPanel implements ListSelectionListener {");
      writer.write(NEWLINE);

      // member variables:
      writer
          .write("private simse.adts.actions.Action action; // action in focus");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("private JList triggerRuleList;");
      writer.write(NEWLINE);
      writer.write("private JList destroyerRuleList;");
      writer.write(NEWLINE);
      writer.write("private JList intermediateRuleList;");
      writer.write(NEWLINE);
      writer
          .write("private JTextArea descriptionArea; // for displaying a rule description");
      writer.write(NEWLINE);
      writer.write(NEWLINE);

      // constructor:
      writer
          .write("public RuleInfoPanel(JFrame owner, simse.adts.actions.Action action) {");
      writer.write(NEWLINE);
      writer.write("this.action = action;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// Create main panel:");
      writer.write(NEWLINE);
      writer.write("JPanel mainPane = new JPanel();");
      writer.write(NEWLINE);
      writer.write("mainPane.setPreferredSize(new Dimension(900, 550));");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// Create rule pane and components:");
      writer.write(NEWLINE);
      writer.write("Box rulePane = Box.createVerticalBox();");
      writer.write(NEWLINE);
      writer.write("JPanel trigRuleTitlePane = new JPanel();");
      writer.write(NEWLINE);
      writer.write("trigRuleTitlePane.add(new JLabel(\"Trigger Rules:\"));");
      writer.write(NEWLINE);
      writer.write("rulePane.add(trigRuleTitlePane);");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// rule lists:");
      writer.write(NEWLINE);
      writer.write("triggerRuleList = new JList();");
      writer.write(NEWLINE);
      writer.write("triggerRuleList.setVisibleRowCount(7);");
      writer.write(NEWLINE);
      writer.write("triggerRuleList.setFixedCellWidth(400);");
      writer.write(NEWLINE);
      writer.write("triggerRuleList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);");
      writer.write(NEWLINE);
      writer.write("triggerRuleList.addListSelectionListener(this);");
      writer.write(NEWLINE);
      writer.write("JScrollPane triggerRuleListPane = new JScrollPane(triggerRuleList);");
      writer.write(NEWLINE);
      writer.write("String trigToolTip = \"Rules that execute at the beginning of the action\";");
      writer.write(NEWLINE);
      writer.write("trigRuleTitlePane.setToolTipText(trigToolTip);");
      writer.write(NEWLINE);
      writer.write("triggerRuleList.setToolTipText(trigToolTip);");
      writer.write(NEWLINE);
      writer.write("rulePane.add(triggerRuleListPane);");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("JPanel destRuleTitlePane = new JPanel();");
      writer.write(NEWLINE);
      writer.write("destRuleTitlePane.add(new JLabel(\"Destroyer Rules:\"));");
      writer.write(NEWLINE);
      writer.write("rulePane.add(destRuleTitlePane);");
      writer.write(NEWLINE);
      writer.write("destroyerRuleList = new JList();");
      writer.write(NEWLINE);
      writer.write("destroyerRuleList.setVisibleRowCount(7);");
      writer.write(NEWLINE);
      writer.write("destroyerRuleList.setFixedCellWidth(400);");
      writer.write(NEWLINE);
      writer.write("destroyerRuleList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);");
      writer.write(NEWLINE);
      writer.write("destroyerRuleList.addListSelectionListener(this);");
      writer.write(NEWLINE);
      writer.write("JScrollPane destroyerRuleListPane = new JScrollPane(destroyerRuleList);");
      writer.write(NEWLINE);
      writer.write("String destToolTip = \"Rules that execute at the end of the action\";");
      writer.write(NEWLINE);
      writer.write("destRuleTitlePane.setToolTipText(destToolTip);");
      writer.write(NEWLINE);
      writer.write("destroyerRuleList.setToolTipText(destToolTip);");
      writer.write(NEWLINE);
      writer.write("rulePane.add(destroyerRuleListPane);");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("JPanel intRuleTitlePane = new JPanel();");
      writer.write(NEWLINE);
      writer.write("intRuleTitlePane.add(new JLabel(\"Intermediate Rules:\"));");
      writer.write(NEWLINE);
      writer.write("rulePane.add(intRuleTitlePane);");
      writer.write(NEWLINE);
      writer.write("intermediateRuleList = new JList();");
      writer.write(NEWLINE);
      writer.write("intermediateRuleList.setVisibleRowCount(7);");
      writer.write(NEWLINE);
      writer.write("intermediateRuleList.setFixedCellWidth(400);");
      writer.write(NEWLINE);
      writer.write("intermediateRuleList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);");
      writer.write(NEWLINE);
      writer.write("intermediateRuleList.addListSelectionListener(this);");
      writer.write(NEWLINE);
      writer.write("JScrollPane intermediateRuleListPane = new JScrollPane(intermediateRuleList);");
      writer.write(NEWLINE);
      writer.write("String intToolTip = \"Rules that execute every clock tick during the life of the action\";");
      writer.write(NEWLINE);
      writer.write("intRuleTitlePane.setToolTipText(intToolTip);");
      writer.write(NEWLINE);
      writer.write("intermediateRuleList.setToolTipText(intToolTip);");
      writer.write(NEWLINE);
      writer.write("rulePane.add(intermediateRuleListPane);");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("initializeRuleLists();");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// description pane:");
      writer.write(NEWLINE);
      writer.write("Box descriptionPane = Box.createVerticalBox();");
      writer.write(NEWLINE);
      writer.write("JPanel descriptionTitlePane = new JPanel();");
      writer.write(NEWLINE);
      writer.write("descriptionTitlePane.add(new JLabel(\"Description:\"));");
      writer.write(NEWLINE);
      writer.write("descriptionPane.add(descriptionTitlePane);");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// description text area:");
      writer.write(NEWLINE);
      writer.write("descriptionArea = new JTextArea(29, 30);");
      writer.write(NEWLINE);
      writer.write("descriptionArea.setLineWrap(true);");
      writer.write(NEWLINE);
      writer.write("descriptionArea.setWrapStyleWord(true);");
      writer.write(NEWLINE);
      writer.write("descriptionArea.setEditable(false);");
      writer.write(NEWLINE);
      writer
          .write("JScrollPane descriptionScrollPane = new JScrollPane(descriptionArea, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);");
      writer.write(NEWLINE);
      writer.write("descriptionPane.add(descriptionScrollPane);");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("rulePane.add(descriptionPane);");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// Add panes to main pane:");
      writer.write(NEWLINE);
      writer.write("mainPane.add(rulePane);");
      writer.write(NEWLINE);
      writer.write("mainPane.add(descriptionPane);");
      writer.write(NEWLINE);
      writer.write("add(mainPane);");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("setOpaque(true);");
      writer.write(NEWLINE);
      writer.write("validate();");
      writer.write(NEWLINE);
      writer.write("repaint();");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);

      // "valueChanged" method:
      writer.write("public void valueChanged(ListSelectionEvent e) {");
      writer.write(NEWLINE);
      writer.write("if ((e.getSource() == triggerRuleList && !triggerRuleList.isSelectionEmpty())) {");
      writer.write(NEWLINE);
      writer.write("destroyerRuleList.clearSelection();");
      writer.write(NEWLINE);
      writer.write("intermediateRuleList.clearSelection();");
      writer.write(NEWLINE);
      writer.write("refreshDescriptionArea();");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write("else if (e.getSource() == destroyerRuleList && !destroyerRuleList.isSelectionEmpty()) {");
      writer.write(NEWLINE);
      writer.write("triggerRuleList.clearSelection();");
      writer.write(NEWLINE);
      writer.write("intermediateRuleList.clearSelection();");
      writer.write(NEWLINE);
      writer.write("refreshDescriptionArea();");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write("else if (e.getSource() == intermediateRuleList && !intermediateRuleList.isSelectionEmpty()) {");
      writer.write(NEWLINE);
      writer.write("triggerRuleList.clearSelection();");
      writer.write(NEWLINE);
      writer.write("destroyerRuleList.clearSelection();");
      writer.write(NEWLINE);
      writer.write("refreshDescriptionArea();");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);

      // "initializeRuleLists" method:
      writer.write("private void initializeRuleLists() {");
      writer.write(NEWLINE);

      // go through all actions:
      Vector<ActionType> actions = actTypes.getAllActionTypes();
      boolean writeElse = false;
      for (ActionType action : actions) {
        if (action.isVisibleInExplanatoryTool()) {
          if (writeElse) {
            writer.write("else ");
          } else {
            writeElse = true;
          }
          writer.write("if (action instanceof "
              + CodeGeneratorUtils.getUpperCaseLeading(action.getName()) + 
              "Action) {");
          writer.write(NEWLINE);
          Vector<Rule> trigRules = action.getAllTriggerRules();
          if (trigRules.size() > 0) {
            writer.write("String[] trigList = {");
            writer.write(NEWLINE);

            // go through all trigger rules:
            for (int j = 0; j < trigRules.size(); j++) {
              Rule trigRule = trigRules.get(j);
              if (trigRule.isVisibleInExplanatoryTool()) {
                writer.write("\"" + trigRule.getName() + "\",");
                writer.write(NEWLINE);
              }
            }
            writer.write("};");
            writer.write(NEWLINE);
            writer.write("triggerRuleList.setListData(trigList);");
            writer.write(NEWLINE);
          }
          Vector<Rule> destRules = action.getAllDestroyerRules();
          if (destRules.size() > 0) {
            writer.write("String[] destList = {");
            writer.write(NEWLINE);

            // go through all destroyer rules:
            for (int j = 0; j < destRules.size(); j++) {
              Rule destRule = destRules.get(j);
              if (destRule.isVisibleInExplanatoryTool()) {
                writer.write("\"" + destRule.getName() + "\",");
                writer.write(NEWLINE);
              }
            }
            writer.write("};");
            writer.write(NEWLINE);
            writer.write("destroyerRuleList.setListData(destList);");
            writer.write(NEWLINE);
          }
          Vector<Rule> contRules = action.getAllContinuousRules();
          if (contRules.size() > 0) {
            writer.write("String[] intList = {");
            writer.write(NEWLINE);

            // go through all continuous rules:
            for (int j = 0; j < contRules.size(); j++) {
              Rule contRule = contRules.get(j);
              if (contRule.isVisibleInExplanatoryTool()) {
                writer.write("\"" + contRule.getName() + "\",");
                writer.write(NEWLINE);
              }
            }
            writer.write("};");
            writer.write(NEWLINE);
            writer.write("intermediateRuleList.setListData(intList);");
            writer.write(NEWLINE);
          }
          writer.write(CLOSED_BRACK);
          writer.write(NEWLINE);
        }
      }
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);

      // "refreshDescriptionArea" method:
      writer
          .write("// refreshes the description area with the selected rule description");
      writer.write(NEWLINE);
      writer.write("private void refreshDescriptionArea() {");
      writer.write(NEWLINE);
      writer.write("String name = null;");
      writer.write(NEWLINE);
      writer.write("if (!triggerRuleList.isSelectionEmpty()) {");
      writer.write(NEWLINE);
      writer.write("name = (String) triggerRuleList.getSelectedValue();");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write("else if (!destroyerRuleList.isSelectionEmpty()) {");
      writer.write(NEWLINE);
      writer.write("name = (String) destroyerRuleList.getSelectedValue();");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write("else if (!intermediateRuleList.isSelectionEmpty()) {");
      writer.write(NEWLINE);
      writer.write("name = (String) intermediateRuleList.getSelectedValue();");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write("if (name != null) {");
      writer.write(NEWLINE);
      writer.write("String text = \"\";");
      writer.write(NEWLINE);

      // go through all actions:
      writeElse = false;
      for (ActionType action : actions) {
        if (action.isVisibleInExplanatoryTool()) {
          if (writeElse) {
            writer.write("else ");
          } else {
            writeElse = true;
          }
          writer.write("if (action instanceof "
              + CodeGeneratorUtils.getUpperCaseLeading(action.getName()) + 
              "Action) {");
          writer.write(NEWLINE);

          // go through all rules:
          Vector<Rule> rules = action.getAllRules();
          boolean writeElse2 = false;
          for (Rule rule : rules) {
            if (rule.isVisibleInExplanatoryTool()) {
              if (writeElse2) {
                writer.write("else ");
              } else {
                writeElse2 = true;
              }
              writer.write("if (name.equals(\"" + rule.getName() + "\")) {");
              writer.write(NEWLINE);
              writer.write("text = RuleDescriptions."
                  + action.getName().toUpperCase() + "_"
                  + rule.getName().toUpperCase() + ";");
              writer.write(NEWLINE);
              writer.write(CLOSED_BRACK);
            }
          }
          writer.write(CLOSED_BRACK);
          writer.write(NEWLINE);
        }
      }
      writer.write("descriptionArea.setText(text);");
      writer.write(NEWLINE);
      writer.write("descriptionArea.setCaretPosition(0);");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);

      writer.write(CLOSED_BRACK);
      writer.close();
    } catch (IOException e) {
      JOptionPane.showMessageDialog(null, ("Error writing file "
          + ruleInfoFile.getPath() + ": " + e.toString()), "File IO Error",
          JOptionPane.WARNING_MESSAGE);
    }
  }
}