/*
 * This class is responsible for generating all of the code for the action panel
 * in the GUI
 */

package simse.codegenerator.guigenerator;

import simse.modelbuilder.objectbuilder.Attribute;
import simse.modelbuilder.objectbuilder.DefinedObjectTypes;
import simse.modelbuilder.objectbuilder.SimSEObjectType;
import simse.modelbuilder.objectbuilder.SimSEObjectTypeTypes;
import simse.modelbuilder.actionbuilder.ActionType;
import simse.modelbuilder.actionbuilder.DefinedActionTypes;
import simse.codegenerator.CodeGenerator;
import simse.codegenerator.CodeGeneratorConstants;
import simse.codegenerator.CodeGeneratorUtils;

import java.util.ArrayList;
import java.util.Vector;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import javax.lang.model.element.Modifier;
import javax.swing.JOptionPane;

import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.ParameterizedTypeName;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;


public class ProjectsPanelGenerator implements CodeGeneratorConstants {
  private DefinedObjectTypes objTypes; // holds all of the defined object types
                                       // from an sso file
  private DefinedActionTypes actTypes; // holds all of the defined action types
                                       // from an ssa file
  private File directory; // directory to save generated code into
  
  private ArrayList<String> impTypes;
  
  private ArrayList<String> impActions;

  public ProjectsPanelGenerator(DefinedObjectTypes objTypes, 
  		DefinedActionTypes actTypes, File directory) {
    this.objTypes = objTypes;
    this.actTypes = actTypes;
    this.directory = directory;
    this.impTypes = new ArrayList<>();
    this.impActions = new ArrayList<>();
  }

  public void generate() {
    File actPanelFile = new File(directory, ("simse\\gui\\ProjectsPanel.java"));
    if (actPanelFile.exists()) {
      actPanelFile.delete(); // delete old version of file
    }
    try {
      FileWriter writer = new FileWriter(actPanelFile);
      writer
          .write("/* File generated by: simse.codegenerator.guigenerator.ProjectsPanelGenerator */");
      ClassName enumeration = ClassName.get("java.util", "Enumeration");
      ClassName hashtable = ClassName.get("java.util", "Hashtable");
      ClassName vector = ClassName.get("java.util", "Vector");
      ClassName eventhandler = ClassName.get("javafx.event", "EventHandler");
      ClassName pos = ClassName.get("javafx.geometry", "Pos");
      ClassName label = ClassName.get("javafx.scene.control", "Label");
      ClassName scrollpane = ClassName.get("javafx.scene.control", "ScrollPane");
      ClassName titledpane = ClassName.get("javafx.scene.control", "TitledPane");
      ClassName imageview = ClassName.get("javafx.scene.image", "ImageView");
      ClassName mousebutton = ClassName.get("javafx.scene.input", "MouseButton");
      ClassName mouseevent = ClassName.get("javafx.scene.input", "MouseEvent");
      ClassName border = ClassName.get("javafx.scene.layout", "Border");
      ClassName borderstroke = ClassName.get("javafx.scene.layout", "BorderStroke");
      ClassName borderstrokestyle = ClassName.get("javafx.scene.layout", "BorderStrokeStyle");
      ClassName borderwidths = ClassName.get("javafx.scene.layout", "BorderWidths");
      ClassName cornerradii = ClassName.get("javafx.scene.layout", "CornerRadii");
      ClassName gridpane = ClassName.get("javafx.scene.layout", "GridPane");
      ClassName hbox = ClassName.get("javafx.scene.layout", "HBox");
      ClassName pane = ClassName.get("javafx.scene.layout", "Pane");
      ClassName vbox = ClassName.get("javafx.scene.layout", "VBox");
      ClassName color = ClassName.get("javafx.scene.paint", "Color");
      ClassName font = ClassName.get("javafx.scene.text", "Font");
      ClassName action = ClassName.get("simse.adts.actions", "Action");
      ClassName project = ClassName.get("simse.adts.objects", "Project");
      ClassName javafxhelpers = ClassName.get("simse.gui.util", "JavaFXHelpers");
      ClassName logic = ClassName.get("simse.logic", "Logic");
      ClassName state = ClassName.get("simse.state", "State");
      ClassName simsegui = ClassName.get("simse.gui", "SimSEGUI");
      ClassName panels = ClassName.get("simse.gui", "Panels");
      ClassName simsepanel = ClassName.get("simse.gui", "SimSEPanel");
      ClassName tabpanel = ClassName.get("simse.gui", "TabPanel");
      TypeName vOfA = ParameterizedTypeName.get(vector, project);
      TypeName hashProjVB = ParameterizedTypeName.get(hashtable, project, vbox);
      TypeName hashProjHB = ParameterizedTypeName.get(hashtable, project, hbox);
      TypeName hashProjLab = ParameterizedTypeName.get(hashtable, project, label);
      TypeName enumOfE = ParameterizedTypeName.get(enumeration, project);
      TypeName mouseHandler = ParameterizedTypeName.get(eventhandler, mouseevent);
      // constructor:
      MethodSpec constructor = MethodSpec.constructorBuilder()
    		  .addModifiers(Modifier.PUBLIC)
    		  .addParameter(simsegui, "gui")
    		  .addParameter(state, "s")
    		  .addParameter(logic, "l")
    		  .addStatement("$N = s", "state")
    		  .addStatement("$N = l", "logic")
    		  .addStatement("$N = gui", "mainGUIFrame")
    		  .addStatement("$N = new $T()", "layout", vbox)
    		  .addStatement("$N.setId(\"actionPanelVBox\")", "layout")
    		  .addStatement("$N = new $T()", "projectPane", scrollpane)
    		  .addStatement("$N.setId(\"scrollPaneActionPanel\")", "projectPane")
    		  .addStatement("$N.setPrefSize(225, 425)", "projectPane")
    		  .addStatement("$N.setId(\"ActionPanelMain\")", "projectPane")
    		  .addStatement("projsToProjPanels = new $T()", hashProjVB)
    		  .addStatement("projsToPicPanels = new $T()", hashProjHB)
    		  .addStatement("projsToPicLabels = new $T()", hashProjLab)
    		  .addStatement("projsToKeyLabels = new $T()", hashProjLab)
    		  .addStatement("$T titlePanel = new $T(\"$T Panel\", $N)", titledpane, titledpane, project, "projectPane")
    		  .addStatement("titlePanel.set$T(Border.EMPTY)", border)
    		  .addStatement("titlePanel.setId(\"ActionTitlePanel\")")
    		  .addStatement("titlePanel.setBackground($T.createBackground$T(Color.rgb(102, 102, 102, 1)))", javafxhelpers, color)
    		  .addStatement("$N.getChildren().add(titlePanel)", "layout")
    		  .addStatement("update()")
    		  .addStatement("this.getChildren().add(layout)")
    		  .build();

      // update function:
      MethodSpec update = MethodSpec.methodBuilder("update")
    		  .addModifiers(Modifier.PUBLIC)
    		  .returns(void.class)
    		  .addStatement("$N.setContent(null)", "projectPane")
    		  .addStatement("projsToProjPanels.clear()")
    		  .addStatement("$T titleLabel = new $T(\"Current Activities:\")", label, label)
    		  .addStatement("$T f = titleLabel.getFont()", font)
    		  .addStatement("$T newFont = new $T(f.getName(), 15)", font, font)
    		  .addStatement("titleLabel.setFont(newFont)")
    		  .addStatement("titleLabel.setTextFill($T.BLACK)", color)
    		  .addStatement("$T projects = new $T()", vbox, vbox)
    		  .addStatement("projects.getChildren().add(titleLabel)")
    		  .addStatement("projects.setSpacing(2)")
    		  .addStatement("$T allProjs = $N.getProjectStateRepository().getAll()", vOfA, "state")
    		  .beginControlFlow("for (int i = 0; i < allProjs.size(); i++)")
    		  .addStatement("$T proj = allProjs.elementAt(i)", project)
    		  .addCode(continueIfHire())
    		  .beginControlFlow("if (projsToProjPanels.get(proj) == null)")
    		  .addStatement("$T tempPanel = new $T()", vbox, vbox)
    		  .addStatement("tempPanel.addEventHandler($T.ANY, this)", mouseevent)
    		  .addStatement("projsToProjPanels.put(proj, tempPanel)")
    		  .endControlFlow()
    		  .beginControlFlow("if (projsToPicPanels.get(proj) == null)")
    		  .addStatement("$T tempPanel = new $T()", hbox, hbox)
    		  .addStatement("tempPanel.addEventHandler($T.ANY, this)", mouseevent)
    		  .addStatement("projsToPicPanels.put(proj, tempPanel)")
    		  .endControlFlow()
    		  .addStatement("$T projPanel = projsToProjPanels.get(proj)", vbox)
    		  .addStatement("projPanel.getChildren().removeAll()")
    		  .addStatement("$T picPanel = ($T) projsToPicPanels.get(proj)", hbox, hbox)
    		  .addStatement("picPanel.setSpacing(5)")
    		  .addStatement("picPanel.setAlignment($T.BASELINE_LEFT)", pos)
    		  .addStatement("picPanel.getChildren().removeAll()")
    		  .addStatement("$T gpLayout = new $T()", gridpane, gridpane)
    		  .addStatement("gpLayout.getChildren().add(projPanel)")
    		  .addStatement("projPanel.setId(\"ActionPanelProject\")")
    		  .addStatement("picPanel.setId(\"ActionPanelProjectBox\")")
    		  .addStatement("picPanel.prefWidthProperty().bind($N.widthProperty())", "projectPane")
    		  .addStatement("projPanel.prefWidthProperty().bind($N.widthProperty())", "projectPane")
    		  .beginControlFlow("if (projsToPicLabels.get(proj) == null)")
    		  .addStatement("$T ico = $T.createImageView($T.getImage(proj))", imageview, javafxhelpers, tabpanel)
    		  .beginControlFlow("if (ico != null)")
    		  .addStatement("ico.setFitHeight(40)")
    		  .addStatement("ico.setFitWidth(40)")
    		  .addStatement("$T temp = new $T()", label, label)
    		  .addStatement("temp.setGraphic(ico)")
    		  .addStatement("temp.addEventHandler($T.ANY, this)", mouseevent)
    		  .addStatement("projsToPicLabels.put(proj, temp)")
    		  .endControlFlow()
    		  .endControlFlow()
    		  .addStatement("$T picLabel = projsToPicLabels.get(proj)", label)
    		  .beginControlFlow("if (picLabel != null)")
    		  .addStatement("picLabel.setAlignment($T.BASELINE_LEFT)", pos)
    		  .addStatement("picLabel.setId(\"ProjectPic\")")
    		  .beginControlFlow("if(!picPanel.getChildren().contains(picLabel))")
    		  .addStatement("picPanel.getChildren().add(picLabel)")
    		  .endControlFlow()
    		  .endControlFlow()
    		  .addCode(getProjectTypes())
    		  .addStatement("picPanel.setBorder(Border.EMPTY)")
    		  .beginControlFlow("if(!projPanel.getChildren().contains(picPanel))")
    		  .addStatement("projPanel.getChildren().add(picPanel)")
    		  .endControlFlow()
    		  .addStatement("$T actsPanel = new $T()", vbox, vbox)
    		  .addStatement("actsPanel.setBackground($T.createBackground$T(Color.rgb(102, 102, 102, 1)))", javafxhelpers, color)
    		  .addStatement("projPanel.set$T(new Border(new $T($T.rgb(102, 102, 102, 1), $T.SOLID, $T.EMPTY, $T.FULL)))", border, borderstroke, color, borderstrokestyle, cornerradii, borderwidths)
    		  .addStatement("Vector<Action> acts = $N.getActionStateRepository().getAllActions(proj)", "state")
    		  .beginControlFlow("for (int j = 0; j < acts.size(); j++)")
    		  .addStatement("$T tempAct = acts.elementAt(j)", action)
    		  .addCode(getActionLables())
    		  .endControlFlow()
    		  .addStatement("actsPanel.setPrefSize(150, (int) (actsPanel.getPrefHeight()))")
    		  .addStatement("projPanel.getChildren().add(actsPanel)")
    		  .addStatement("projPanel.setBorder(new $T(new $T($T.BLACK,\n"
      		  		+ "$T.SOLID,\n"
      		  		+ "$T.EMPTY, $T.THIN)))", border, borderstroke, color, borderstrokestyle, cornerradii, borderstroke)
    		  .addStatement("projects.getChildren().add(projPanel)")
    		  .endControlFlow()
    		  .addStatement("$N.setContent(projects)", "projectPane")
    		  .build();	

      MethodSpec projFromLabel = MethodSpec.methodBuilder("getProjFromPicLabel")
    		  .addModifiers(Modifier.PRIVATE)
    		  .returns(project)
    		  .addParameter(label, "label")
    		  .beginControlFlow("for ($T keys = projsToPicLabels.keys(); keys.hasMoreElements();)", enumOfE)
    		  .addStatement("$T keyProj = keys.nextElement()", project)
    		  .beginControlFlow("if (projsToPicLabels.get(keyProj) == label)")
    		  .addStatement("return keyProj")
    		  .endControlFlow()
    		  .endControlFlow()
    		  .addStatement("return null")
    		  .build();
      
      
      MethodSpec projFromPanel = MethodSpec.methodBuilder("getProjFromPanel")
    		  .addModifiers(Modifier.PRIVATE)
    		  .returns(project)
    		  .addParameter(pane, "panel")
    		  .beginControlFlow("for ($T keys = projsToProjPanels.keys(); keys.hasMoreElements();)", enumOfE)
    		  .addStatement("$T keyProj = keys.nextElement()", project)
    		  .beginControlFlow("if (projsToProjPanels.get(keyProj) == panel)")
    		  .addStatement("return keyProj")
    		  .endControlFlow()
    		  .endControlFlow()
    		  .beginControlFlow("for ($T keys = projsToPicPanels.keys(); keys.hasMoreElements();)", enumOfE)
    		  .addStatement("$T keyProj = keys.nextElement()", project)
    		  .beginControlFlow("if (projsToProjPanels.get(keyProj) == panel)")
    		  .addStatement("return keyProj")
    		  .endControlFlow()
    		  .endControlFlow()
    		  .addStatement("return null")
    		  .build();
      
      MethodSpec handle = MethodSpec.methodBuilder("handle")
    		  .addAnnotation(Override.class)
    		  .addModifiers(Modifier.PUBLIC)
    		  .returns(void.class)
    		  .addParameter(mouseevent, "event")
    		  .beginControlFlow("if (event.getEventType() == $T.MOUSE_RELEASED)", mouseevent)
    		  .beginControlFlow("if (event.getSource() instanceof $T)", label)
    		  .addStatement("$T label = ($T) event.getSource()", label, label)
    		  .addStatement("$T proj = getProjFromPicLabel(label)", project)
    		  .beginControlFlow("if (proj != null)")
    		  .beginControlFlow("if (event.getButton().equals($T.PRIMARY))", mousebutton)
    		  .addStatement("$N.getTabPanel().setGUIChanged()", "mainGUIFrame")
    		  .addStatement("$N.getTabPanel().setObjectInFocus(proj)", "mainGUIFrame")
    		  .addStatement("$N.getAttributePanel().setGUIChanged()", "mainGUIFrame")
    		  .addStatement("$N.getAttributePanel().setObjectInFocus(proj, $T.createImage(TabPanel.getImage(proj)))", "mainGUIFrame", javafxhelpers)
    		  .endControlFlow()
    		  .endControlFlow()
    		  .nextControlFlow("else if (event.getSource() instanceof $T)", pane)
    		  .addStatement("$T pane = ($T) event.getSource()", pane, pane)
    		  .addStatement("$T proj = getProjFromPanel(pane)", project)
    		  .beginControlFlow("if (proj != null)")
    		  .beginControlFlow("if (event.getButton().equals($T.PRIMARY))", mousebutton)
    		  .addStatement("$N.getTabPanel().setGUIChanged()", "mainGUIFrame")
    		  .addStatement("$N.getTabPanel().setObjectInFocus(proj)", "mainGUIFrame")
    		  .addStatement("$N.getAttributePanel().setGUIChanged()", "mainGUIFrame")
    		  .addStatement("$N.getAttributePanel().setObjectInFocus(proj,JavaFXHelpers.createImage(TabPanel.getImage(proj)))", "mainGUIFrame")
    		  .endControlFlow()
    		  .endControlFlow()
    		  .endControlFlow()
    		  .endControlFlow()
    		  .build();
      
      MethodSpec getPanelType = MethodSpec.methodBuilder("getPanelType")
    		  .addAnnotation(Override.class)
    		  .addModifiers(Modifier.PUBLIC)
    		  .returns(panels)
    		  .addStatement("return $T.PROJECTS", panels)
    		  .build();
      
      TypeSpec actionPanel = TypeSpec.classBuilder("ProjectsPanel")
    		  .addModifiers(Modifier.PUBLIC)
    		  .superclass(pane)
    		  .addSuperinterface(mouseHandler)
    		  .addSuperinterface(simsepanel)
    		  .addField(state, "state", Modifier.PRIVATE)
    		  .addField(logic, "logic", Modifier.PRIVATE)
    		  .addField(simsegui, "mainGUIFrame", Modifier.PRIVATE)
    		  .addField(project, "selectedProj", Modifier.PRIVATE)
    		  .addField(scrollpane, "projectPane", Modifier.PRIVATE)
    		  .addField(hashProjVB, "projsToProjPanels", Modifier.PRIVATE)
    		  .addField(hashProjHB, "projsToPicPanels", Modifier.PRIVATE)
    		  .addField(hashProjLab, "projsToPicLabels", Modifier.PRIVATE)
    		  .addField(hashProjLab, "projsToKeyLabels", Modifier.PRIVATE)
    		  .addField(vbox, "layout", Modifier.PRIVATE)
    		  .addMethod(constructor)
    		  .addMethod(update)
    		  .addMethod(projFromLabel)
    		  .addMethod(projFromPanel)
    		  .addMethod(handle)
    		  .addMethod(getPanelType)
    		  .build();
      
      JavaFile file = JavaFile.builder("", actionPanel)
    		  .build();
      
      String fileString = "package simse.gui;\n\nimport javafx.scene.text.TextAlignment;\n";
      for (String type : impTypes) {
			fileString = fileString + "import simse.adts.objects." + type + ";\n";
		}
      
      for (String actionI : impActions) {
    	  fileString = fileString + "import simse.adts.actions." + actionI +"Action;\n";
      }
		
		fileString = fileString + file.toString();
		
		
		writer.write(fileString);
      
      writer.close();
    } catch (IOException e) {
      JOptionPane.showMessageDialog(null, ("Error writing file "
          + actPanelFile.getPath() + ": " + e.toString()), "File IO Error",
          JOptionPane.WARNING_MESSAGE);
    }
  }
  
  private String getActionLables() {
	  String actions = "";
	  Vector<ActionType> allActs = actTypes.getAllActionTypes();
	        boolean putElse = false;
	        for (ActionType tempActType : allActs) {
	          if ((tempActType.isVisibleInSimulation())
	              && (tempActType.getDescription() != null)
	              && (tempActType.getDescription().length() > 0)) {
	        	if (!this.impActions.contains(CodeGeneratorUtils.getUpperCaseLeading(tempActType.getName()))) {
	        		this.impActions.add(CodeGeneratorUtils.getUpperCaseLeading(tempActType.getName()));
	        	}
	            if (putElse) {
	            	actions = actions.concat("else ");
	            } else {
	              putElse = true;
	            }
	            actions = actions.concat("if(tempAct instanceof "
	                + CodeGeneratorUtils.getUpperCaseLeading(tempActType.getName()) + 
	                "Action)");
	            actions = actions.concat("\n");
	            actions = actions.concat("{");
	            actions = actions.concat("\n");
	            actions = actions.concat("Label tempLabel = new Label(\""
	                + tempActType.getDescription() + "\");");
	            actions = actions.concat("\n");
	            actions = actions.concat("tempLabel.setFont(new Font(tempLabel.getFont().getName(), 10));");
	            actions = actions.concat("\n");
	            actions = actions.concat("tempLabel.setTextFill(Color.WHITE);");
	            actions = actions.concat("\n");
	            actions = actions.concat("actsPanel.getChildren().add(tempLabel);");
	            actions = actions.concat("\n");
	            actions = actions.concat("}");
	            actions = actions.concat("\n");
	          }
	        }
	       return actions;
	      
  }
  
  private String continueIfHire() {
	  String hire = "";
	  if (CodeGenerator.allowHireFire) {
		  hire = hire.concat("if (!proj.getHired())\n");
		  hire = hire.concat("continue;\n");
	      }
	  return hire;
  }
  
  private String getProjectTypes() {
	  String projs = "";
	  Vector<SimSEObjectType> projTypes = objTypes
	            .getAllObjectTypesOfType(SimSEObjectTypeTypes.PROJECT);
	        for (int i = 0; i < projTypes.size(); i++) {
	          SimSEObjectType tempType = projTypes.elementAt(i);
	          if (!this.impTypes.contains(CodeGeneratorUtils.getUpperCaseLeading(tempType.getName()))) {
	        	  this.impTypes.add(CodeGeneratorUtils.getUpperCaseLeading(tempType.getName()));
	          }
	          if (i > 0) {
	        	  projs = projs.concat("else ");
	          }

	          Vector<Attribute> v = tempType.getAllAttributes();
	          Attribute keyAtt = null;
	          for (Attribute att : v) {
	            if (att.isKey())
	              keyAtt = att;
	          }

	          projs = projs.concat("if(proj instanceof "
	              + CodeGeneratorUtils.getUpperCaseLeading(tempType.getName()) + ")");
	          projs = projs.concat("\n");
	          projs = projs.concat("{");
	          projs = projs.concat("\n");
	          projs = projs.concat(CodeGeneratorUtils.getUpperCaseLeading(tempType.getName()) 
	          		+ " e = (" + 
	          		CodeGeneratorUtils.getUpperCaseLeading(tempType.getName()) + 
	          		")proj;");
	          projs = projs.concat("\n");
	          projs = projs.concat("if(projsToKeyLabels.get(e) == null)");
	          projs = projs.concat("\n");
	          projs = projs.concat("{");
	          projs = projs.concat("\n");
	          projs = projs.concat("Label temp = new Label(\"\" + e.get"
	              + CodeGeneratorUtils.getUpperCaseLeading(keyAtt.getName()) + 
	              "());");
	          projs = projs.concat("\n");
	          projs = projs.concat("temp.setTextFill(Color.BLACK);");
	          projs = projs.concat("\n");
	          projs = projs.concat("temp.setAlignment(Pos.BASELINE_LEFT);");
	          projs = projs.concat("\n");
	          projs = projs.concat("temp.setTextAlignment(TextAlignment.LEFT);");
	          projs = projs.concat("\n");
	          projs = projs.concat("projsToKeyLabels.put(e, temp);");
	          projs = projs.concat("\n");
	          projs = projs.concat("}");
	          projs = projs.concat("\n");
	          projs = projs.concat("Label keyLabel = projsToKeyLabels.get(e);");
	          projs = projs.concat("\n");
	          projs = projs.concat("keyLabel.setId(\"ProjectName\");");
	          projs = projs.concat("\n");
	          projs = projs.concat("if(!picPanel.getChildren().contains(keyLabel))");
	          projs = projs.concat("{");
	          projs = projs.concat("\n");
	          projs = projs.concat("picPanel.getChildren().add(keyLabel);");
	          projs = projs.concat("\n");
	          projs = projs.concat("}");
	          projs = projs.concat("\n");
	          projs = projs.concat("}");
	          projs = projs.concat("\n");
	        }
	  return projs;
  }
}